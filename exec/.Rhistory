target = 0;
for(i in 1:data_surv$N) {
if (data_surv$CENC[i] == 0)
target = target +   log_igauss_right_censor(as.numeric(data_surv$t[i,1]),as.numeric(l+l_reff[ID[i]]), as.numeric(b) );
if (data_surv$CENC[i] == 1)
target = target +  log_igauss_exact_lifetime(as.numeric(data_surv$t[i,1]),as.numeric(l+l_reff[ID[i]]), as.numeric(b) );
if (data_surv$CENC[i] == 2)
target =  target + log_igauss_left_censor(as.numeric(data_surv$t[i,1]),as.numeric(l+l_reff[ID[i]]), as.numeric(b) );
if (data_surv$CENC[i] == 3)
target = target +  log_igauss_interval_censor(as.numeric(data_surv$t[i,1]),as.numeric(data_surv$t[i,2]),as.numeric(l+l_reff[ID[i]]), as.numeric(b) );
}
target = target + dnorm(l, log=TRUE) + dnorm(b,log=TRUE) + dgamma(lsig_sq,1,1,log=TRUE)
for (i in 1:length(l_reff)){
target = target + dnorm(l_reff[i],0,lsig_sq)
}
#####################################################
#####################################################
nparms <- ncol(as.matrix(fitr)) -1
log.wei.p = target
cov <- cov(as.matrix(fitr)[,-ncol(as.matrix(fitr))])
bayesFactor = log((2*pi)^(nparms)) + 0.5*log(det(cov)) + log.wei.p
names(bayesFactor) <- "LogBF"
return( list(modelFit =fitr,bayesFactor = bayesFactor))
}
####################################################
# Fit the LogGumbel
#####################################################
logGumbel_model_fit <- function(data_surv,mcmc_iter = 10000, mcmc_warmup = 1000,
seed=8675309, adapt_delta = 0.9)
{
fitr =    sampling(stanmodels$loggumbel,data=data_surv,
iter=mcmc_iter,warmup=mcmc_warmup,seed=seed,
control=list(adapt_delta = adapt_delta))
expose_stan_functions(stanmodels$loggumbel)
################################################################
#### compute the log prior probability WITH integrating factors
################################################################
est.parms <- as.list(colMeans(as.matrix(fitr))[1:3])
b <- est.parms$b
l <- est.parms$l
lsig_sq <- est.parms$lsig_sq
l_reff   <-  colMeans(as.matrix(fitr))[-c(1:3,ncol(as.matrix(fitr)))]
target = 0;
target = 0;
for(i in 1:data_surv$N) {
if (data_surv$CENC[i] == 0)
target = target +   log_lgum_right_censor(as.numeric(data_surv$t[i,1]),as.numeric(l+l_reff[ID[i]]), as.numeric(b) );
if (data_surv$CENC[i] == 1)
target = target +  log_lgum_exact_lifetime(as.numeric(data_surv$t[i,1]),as.numeric(l+l_reff[ID[i]]), as.numeric(b) );
if (data_surv$CENC[i] == 2)
target =  target + log_lgum_left_censor(as.numeric(data_surv$t[i,1]),as.numeric(l+l_reff[ID[i]]), as.numeric(b) );
if (data_surv$CENC[i] == 3)
target = target +  log_lgum_interval_censor(as.numeric(data_surv$t[i,1]),as.numeric(data_surv$t[i,2]),as.numeric(l+l_reff[ID[i]]), as.numeric(b) );
}
target = target + dnorm(l, log=TRUE) + dnorm(b,log=TRUE) + dgamma(lsig_sq,1,1,log=TRUE)
for (i in 1:length(l_reff)){
target = target + dnorm(l_reff[i],0,lsig_sq)
}
#####################################################
#####################################################
nparms <- ncol(as.matrix(fitr)) -1
log.wei.p = target
cov <- cov(as.matrix(fitr)[,-ncol(as.matrix(fitr))])
bayesFactor = log((2*pi)^(nparms)) + 0.5*log(det(cov)) + log.wei.p
names(bayesFactor) <- "LogBF"
return( list(modelFit =fitr,bayesFactor = bayesFactor))
}
####################################################
# Fit the LogExpModNormal
#####################################################
logExpModNorm_model_fit <- function(data_surv,mcmc_iter = 10000, mcmc_warmup = 1000,
seed=8675309, adapt_delta = 0.9)
{
fitr =    sampling(stanmodels$expmodn,data=data_surv,
iter=mcmc_iter,warmup=mcmc_warmup,seed=seed,chains=1,
control=list(adapt_delta = adapt_delta))
expose_stan_functions(stanmodels$expmodn)
################################################################
#### compute the log prior probability WITH integrating factors
################################################################
est.parms <- as.list(colMeans(as.matrix(fitr))[1:4])
nu <- est.parms$nu
b <- est.parms$b
l <- est.parms$l
lsig_sq <- est.parms$lsig_sq
l_reff   <-  colMeans(as.matrix(fitr))[-c(1:4,ncol(as.matrix(fitr)))]
target = 0;
for(i in 1:data_surv$N) {
if (data_surv$CENC[i] == 0)
target = target +   log_expmn_right_censor(as.numeric(data_surv$t[i,1]),as.numeric(nu),as.numeric(l+l_reff[ID[i]]), as.numeric(b) );
if (data_surv$CENC[i] == 1)
target = target +  log_expmn_exact_lifetime(as.numeric(data_surv$t[i,1]),as.numeric(nu),as.numeric(l+l_reff[ID[i]]), as.numeric(b) );
if (data_surv$CENC[i] == 2)
target =  target + log_expmn_left_censor(as.numeric(data_surv$t[i,1]),as.numeric(nu),as.numeric(l+l_reff[ID[i]]), as.numeric(b) );
if (data_surv$CENC[i] == 3)
target = target +  log_expmn_interval_censor(as.numeric(data_surv$t[i,1]),as.numeric(data_surv$t[i,2]),as.numeric(nu),as.numeric(l+l_reff[ID[i]]), as.numeric(b) );
}
target = target + dnorm(l,log=TRUE) + dnorm(b,log=TRUE) + dgamma(lsig_sq,1,1,log=TRUE)
for (i in 1:length(l_reff)){
target = target + dnorm(l_reff[i],0,lsig_sq)
}
#####################################################
#####################################################
nparms <- ncol(as.matrix(fitr)) -1
log.wei.p = target
cov <- cov(as.matrix(fitr)[,-ncol(as.matrix(fitr))])
bayesFactor = log((2*pi)^(nparms)) + 0.5*log(det(cov)) + log.wei.p
names(bayesFactor) <- "LogBF"
return( list(modelFit =fitr,bayesFactor = bayesFactor))
}
####################################################
# Fit the LogDoubleExponential
#####################################################
logDoubleExp_model_fit <- function(data_surv,mcmc_iter = 10000, mcmc_warmup = 1000,
seed=8675309, adapt_delta = 0.9)
{
fitr =    sampling(stanmodels$logdexp,data=data_surv,
iter=mcmc_iter,warmup=mcmc_warmup,seed=seed,
control=list(adapt_delta = adapt_delta))
expose_stan_functions(stanmodels$logdexp)
################################################################
#### compute the log prior probability WITH integrating factors
################################################################
est.parms <- as.list(colMeans(as.matrix(fitr))[1:3])
b <- as.numeric(est.parms$b)
l <- as.numeric(est.parms$l)
lsig_sq <- as.numeric(est.parms$lsig_sq)
l_reff   <-  colMeans(as.matrix(fitr))[-c(1:3,ncol(as.matrix(fitr)))]
target = 0;
for(i in 1:data_surv$N) {
if (data_surv$CENC[i] == 0)
target =  target+ log_ldexp_right_censor(as.numeric(data_surv$t[i,1]), l+l_reff[ID[i]], b );
if (data_surv$CENC[i] == 1)
target =  target+ log_ldexp_exact_lifetime(as.numeric(data_surv$t[i,1]),l+l_reff[ID[i]], b);
if (data_surv$CENC[i] == 2)
target =  target+ log_ldexp_left_censor(as.numeric(data_surv$t[i,1]),l+l_reff[ID[i]], b);
if (data_surv$CENC[i] == 3)
target =  target+ log_ldexp_interval_censor(as.numeric(data_surv$t[i,1]),as.numeric(data_surv$t[i,2]),l+l_reff[ID[i]], b);
}
target = target + dnorm(l,log=TRUE) + dnorm(b,log=TRUE) + dgamma(lsig_sq,1,1,log=TRUE)
for (i in 1:length(l_reff)){
target = target + dnorm(l_reff[i],0,lsig_sq)
}
#####################################################
#####################################################
nparms <- ncol(as.matrix(fitr)) -1
log.wei.p = target
cov <- cov(as.matrix(fitr)[,-ncol(as.matrix(fitr))])
bayesFactor = log((2*pi)^(nparms)) + 0.5*log(det(cov)) + log.wei.p
names(bayesFactor) <- "LogBF"
return( list(modelFit =fitr,bayesFactor = bayesFactor))
}
####################################################
# Fit the LogLogistic
#####################################################
logLogistic_model_fit <- function(data_surv,mcmc_iter = 10000, mcmc_warmup = 1000,
seed=8675309, adapt_delta = 0.9)
{
fitr =    sampling(stanmodels$logistic,data=data_surv,
iter=mcmc_iter,warmup=mcmc_warmup,seed=seed,chains=1,
control=list(adapt_delta = adapt_delta))
expose_stan_functions(stanmodels$logistic)
################################################################
#### compute the log prior probability WITH integrating factors
################################################################
est.parms <- as.list(colMeans(as.matrix(fitr))[1:3])
b <- as.numeric(est.parms$b)
l <- as.numeric(est.parms$l)
lsig_sq <- as.numeric(est.parms$lsig_sq)
l_reff   <-  colMeans(as.matrix(fitr))[-c(1:3,ncol(as.matrix(fitr)))]
target = 0;
for(i in 1:data_surv$N) {
if (data_surv$CENC[i] == 0)
target = target +   log_logistic_right_censor(as.numeric(data_surv$t[i,1]),as.numeric(l+l_reff[ID[i]]), as.numeric(b) );
if (data_surv$CENC[i] == 1)
target = target +  log_logistic_exact_lifetime(as.numeric(data_surv$t[i,1]),as.numeric(l+l_reff[ID[i]]), as.numeric(b) );
if (data_surv$CENC[i] == 2)
target =  target + log_logistic_left_censor(as.numeric(data_surv$t[i,1]),as.numeric(l+l_reff[ID[i]]), as.numeric(b) );
if (data_surv$CENC[i] == 3)
target = target +  log_logistic_interval_censor(as.numeric(data_surv$t[i,1]),as.numeric(data_surv$t[i,2]),as.numeric(l+l_reff[ID[i]]), as.numeric(b) );
}
target = target + dnorm(l,log=TRUE) + dnorm(b,log=TRUE) + dgamma(lsig_sq,1,1,log=TRUE)
for (i in 1:length(l_reff)){
target = target + dnorm(l_reff[i],0,lsig_sq)
}
#####################################################
#####################################################
nparms <- ncol(as.matrix(fitr)) -1
log.wei.p = target
cov <- cov(as.matrix(fitr)[,-ncol(as.matrix(fitr))])
bayesFactor = log((2*pi)^(nparms)) + 0.5*log(det(cov)) + log.wei.p
names(bayesFactor) <- "LogBF"
return( list(modelFit =fitr,bayesFactor = bayesFactor))
}
warmup = 1000
sample = 20000
igauss.fit <- invGaussian_model_fit(data_surv,mcmc_iter = sample,mcmc_warmup = warmup,adapt_delta = 0.90)
igauss.fit$modelFit
b <- est.parms$b
l <- est.parms$l
reff <- rnorm(length(est.parms$lsig_sq),0,est.parms$lsig_sq)
igauss_surv <- do.call(rbind,vigauss_surv(t, l+reff, b,length(reff),length(t)))
est.parms <- extract(igauss.fit$modelFit)
b <- est.parms$b
l <- est.parms$l
reff <- rnorm(length(est.parms$lsig_sq),0,est.parms$lsig_sq)
igauss_surv <- do.call(rbind,vigauss_surv(t, l+reff, b,length(reff),length(t)))
b
l
igauss.fit$bayesFactor
vigauss_surv(t, l+reff, b,length(reff),length(t))
vigauss_surv(as.numeric(t), as.numeric(l+reff), as.numeric(b),length(reff),length(t))
as.matrix(t)
t    <- seq(0,25,0.1)
do.call(rbind,vigauss_surv(as.matrix(t), as.matrix(l+reff), as.matrix(b),length(reff),length(t)))
igauss_surv <- do.call(rbind,vigauss_surv(as.matrix(t), as.matrix(l+reff), as.matrix(b),length(reff),length(t)))
vu <- apply(igauss_surv,2,quantile,alpha,na.rm = T)
vm <- apply(igauss_surv,2,mean,na.rm = T)
vl <- apply(igauss_surv,2,quantile,1-alpha,na.rm = T)
igauss_surv <- do.call(rbind,vigauss_surv(t, l+reff, b,length(reff),length(t)))
vu <- apply(igauss_surv,2,quantile,alpha,na.rm = T)
vm <- apply(igauss_surv,2,mean,na.rm = T)
vl <- apply(igauss_surv,2,quantile,1-alpha,na.rm = T)
dim(igauss_surv)
alpha = 0.05
vu <- apply(igauss_surv,2,quantile,alpha,na.rm = T)
vm <- apply(igauss_surv,2,mean,na.rm = T)
vl <- apply(igauss_surv,2,quantile,1-alpha,na.rm = T)
library(survival)
######################################################
km.as.one <- survfit(Surv(as.matrix(TR[,1]),as.matrix(TR[,2]),CENC.MAT,type='interval') ~ 1,  conf.type = "log-log")
plot(km.as.one,xlim = c(0,25))
lines(t,vu,col=2,lty=2)
lines(t,vm,col=2)
lines(t,vl,col=2,lty=2)
igauss.fit$modelFit
install.packages("loo")
library(readr)
data2 <- read_csv("~/sambashare/data2.csv")
View(data2)
ID = data2$study
TR = data2[,2:3]
#TR = TR/max(TR,na.rm=TRUE)*100
CENC.MAT = matrix(0,nrow=nrow(TR))
# no exact failure times in this data
for (i in 1:nrow(TR)){
if ( !is.na(TR[i,1]) && !is.na(TR[i,2]))
{
CENC.MAT[i] = 3
}else{
if ( !is.na(TR[i,1]) && is.na(TR[i,2]))
{
CENC.MAT[i] = 2
TR[i,2] = -9999999999;
}else{
CENC.MAT[i] = 0
TR[i,1] = TR[i,2]
TR[i,2] = -9999999999;
}
}
}
##################################
data_surv <- list(
N=length(CENC.MAT),
N_GROUPS = length(unique(ID)),
t = TR,
ID = as.numeric(ID),
CENC = as.numeric(CENC.MAT)
)
##################################
library(rstan)
library(survregma)
fitr =    sampling(stanmodels$wei,data=data_surv)
bob = extract(fitr)[["log_lik"]]
bob
setwd("~/sambashare/survregma/exec")
setwd("~/Documents/programs/survregma/exec")
setwd("~/Documents/programs/survregma/exec")
library(rstan)
library(survregma)
library(readr)
data2 <- read_csv("~/sambashare/data2.csv")
View(data2)
ID = data2$study
TR = data2[,2:3]
#TR = TR/max(TR,na.rm=TRUE)*100
CENC.MAT = matrix(0,nrow=nrow(TR))
# no exact failure times in this data
for (i in 1:nrow(TR)){
if ( !is.na(TR[i,1]) && !is.na(TR[i,2]))
{
CENC.MAT[i] = 3
}else{
if ( !is.na(TR[i,1]) && is.na(TR[i,2]))
{
CENC.MAT[i] = 2
TR[i,2] = -9999999999;
}else{
CENC.MAT[i] = 0
TR[i,1] = TR[i,2]
TR[i,2] = -9999999999;
}
}
}
##################################
data_surv <- list(
N=length(CENC.MAT),
N_GROUPS = length(unique(ID)),
t = TR,
ID = as.numeric(ID),
CENC = as.numeric(CENC.MAT)
)
##################################
fitr.wei  =    sampling(stanmodels$wei,data=data_surv)
fitr.lnor =    sampling(stanmodels$lognormal,data=data_surv)
fitr.llog =    sampling(stanmodels$logistic,data=data_surv)
fitr.lgum =    sampling(stanmodels$loggumbel,data=data_surv)
fitr.ldex =    sampling(stanmodels$logdexp,data=data_surv)
fitr.igauss =    sampling(stanmodels$inv_gaussian,data=data_surv)
fitr.exmn =    sampling(stanmodels$expmodn,data=data_surv)
log_lik_list <- list()
log_lik_list[[1]] = extract(fitr.wei)[["log_lik"]]
log_lik_list[[2]] = extract(fitr.lnor)[["log_lik"]]
log_lik_llog[[3]] = extract(fitr.llog)[["log_lik"]]
log_lik_llog[[4]] = extract(fitr.lgum)[["log_lik"]]
log_lik_llog[[5]] = extract(fitr.ldex)[["log_lik"]]
log_lik_llog[[6]] = extract(fitr.igauss)[["log_lik"]]
log_lik_llog[[7]] = extract(fitr.exmn)[["log_lik"]]
log_lik_list <- list()
log_lik_list[[1]] = extract(fitr.wei)[["log_lik"]]
log_lik_list[[2]] = extract(fitr.lnor)[["log_lik"]]
log_lik_llog[[3]] = extract(fitr.llog)[["log_lik"]]
rm(list=objects())
library(survregma)
library(rstan)
library(readr)
data2 <- read_csv("~/sambashare/data2.csv")
View(data2)
setwd("~/Documents/programs/survregma/exec")
ID = data2$study
TR = data2[,2:3]
#TR = TR/max(TR,na.rm=TRUE)*100
CENC.MAT = matrix(0,nrow=nrow(TR))
# no exact failure times in this data
for (i in 1:nrow(TR)){
if ( !is.na(TR[i,1]) && !is.na(TR[i,2]))
{
CENC.MAT[i] = 3
}else{
if ( !is.na(TR[i,1]) && is.na(TR[i,2]))
{
CENC.MAT[i] = 2
TR[i,2] = -9999999999;
}else{
CENC.MAT[i] = 0
TR[i,1] = TR[i,2]
TR[i,2] = -9999999999;
}
}
}
##################################
data_surv <- list(
N=length(CENC.MAT),
N_GROUPS = length(unique(ID)),
t = TR,
ID = as.numeric(ID),
CENC = as.numeric(CENC.MAT)
)
##################################
fitr.llog =    sampling(stanmodels$logistic,data=data_surv)
log_lik_llog[[3]] = extract(fitr.llog)[["log_lik"]]
fitr.wei  =    sampling(stanmodels$wei,data=data_surv)
fitr.lnor =    sampling(stanmodels$lognormal,data=data_surv)
fitr.llog =    sampling(stanmodels$logistic,data=data_surv)
log_lik_list <- list()
log_lik_list[[1]] = extract(fitr.wei)[["log_lik"]]
log_lik_list[[2]] = extract(fitr.lnor)[["log_lik"]]
log_lik_list[[3]] = extract(fitr.llog)[["log_lik"]]
fitr.lgum =    sampling(stanmodels$loggumbel,data=data_surv)
fitr.ldex =    sampling(stanmodels$logdexp,data=data_surv)
fitr.igauss =    sampling(stanmodels$inv_gaussian,data=data_surv)
fitr.exmn =    sampling(stanmodels$expmodn,data=data_surv)
log_lik_list[[1]] = extract(fitr.wei)[["log_lik"]]
log_lik_list[[2]] = extract(fitr.lnor)[["log_lik"]]
log_lik_list[[3]] = extract(fitr.llog)[["log_lik"]]
log_lik_list[[4]] = extract(fitr.lgum)[["log_lik"]]
log_lik_list[[5]] = extract(fitr.ldex)[["log_lik"]]
log_lik_list[[6]] = extract(fitr.igauss)[["log_lik"]]
log_lik_list[[7]] = extract(fitr.exmn)[["log_lik"]]
library(loo)
model_weights_1 <- model_weights(log_lik_list,method="stacking")
?model.weights
model_weights <-function(log_lik_list, method="stacking",BB=T,BB_n=1000, alpha=1, seed=NULL, optim_method="BFGS")
{
if (!method %in%c("stacking","pseudobma") )
stop("Must specify a method in stacking or pseudobma .")
K<-length(log_lik_list)                #number of models
if (K==1)
stop("Only one model is found.")
if(length(unique(unlist(lapply(log_lik_list,ncol))))!=1 |length(unique(unlist(lapply(log_lik_list,nrow))))!=1)
stop("Dimensions do not match. Each element of log_lik_list should have same dimensions.")
N<-ncol(log_lik_list[[1]])             #number of data points
lpd_point<-matrix(NA,N,K)            #point wise log likelihood
elpd_loo<-rep(NA,K)
for( k in 1:K){
log_likelihood<- log_lik_list[[k]]
L<-loo(log_likelihood)
lpd_point[,k] <- L$pointwise[,1]    #calculate log(p_k (y_i | y_-i))
elpd_loo[k]<-L$elpd_loo
}
## 1) stacking on log score
if (method =="stacking"){
w_stacking <- stacking_weight(lpd_point, optim_method=optim_method)
cat("The stacking weights are:\n")
print(rbind(paste("Model"  ,c(1:K) ), round(w_stacking*100 )/100))
return(w_stacking)
}
else
if (method =="pseudobma"){
uwts <- exp( elpd_loo - max( elpd_loo))
w_loo1 <- uwts / sum(uwts)
if(BB==F){
cat("The Pseudo-BMA weights are:\n")
print(rbind(paste("Model"  ,c(1:K) ),  round(w_loo1*100 )/100))
return(w_loo1)
}
if(BB==T){
w_loo2  <- pseudobma_weight(lpd_point, BB_n,alpha, seed)
cat("The Pseudo-BMA+ weights using Bayesian Bootstrap  are:\n ")
print(rbind(paste("Model",c(1:K) ),  round(w_loo2*100 )/100))
return (w_loo2 )
}
}
}
model_weights_1 <- model_weights(log_lik_list,method="stacking")
library(loo)
model_weights_1 <- model_weights(log_lik_list,method="stacking")
help('pareto-k-diagnostic')
pareto_k_table(log_lik_list)
?model_weights(log_lik_list,method="stacking")
model_weights_1 <- model_weights(log_lik_list,method="stacking",optim_method = "SANN")
model_weights_1 <- model_weights(log_lik_list,method="stacking",optim_method = "CG")
model_weights_1 <- model_weights(log_lik_list,method="stacking",optim_method = "L-BFGS-B")
model_weights_1 <- model_weights(log_lik_list,method="stacking",optim_method = "Brent")
model_weights_1 <- model_weights(log_lik_list,method="stacking",optim_method = "CG")
model_weights_1 <- model_weights(log_lik_list,method="stacking",optim_method = "BFGS")
model_weights_1 <- model_weights(log_lik_list,method="stacking",optim_method = "CG")
log_lik_list <- list()
log_lik_list[[1]] = extract(fitr.ldex)[["log_lik"]]
log_lik_list[[2]] = extract(fitr.igauss)[["log_lik"]]
log_lik_list[[3]] = extract(fitr.exmn)[["log_lik"]]
model_weights_1 <- model_weights(log_lik_list,method="stacking",optim_method = "CG")
log_lik_list[[1]] = extract(fitr.lnor)[["log_lik"]]
log_lik_list[[2]] = extract(fitr.llog)[["log_lik"]]
log_lik_list <- list()
model_weights_1 <- model_weights(log_lik_list,method="stacking",optim_method = "CG")
log_lik_list[[1]] = extract(fitr.lnor)[["log_lik"]]
log_lik_list[[2]] = extract(fitr.llog)[["log_lik"]]
model_weights_1 <- model_weights(log_lik_list,method="stacking",optim_method = "CG")
log_lik_list <- list()
log_lik_list[[1]] = extract(fitr.wei)[["log_lik"]]
log_lik_list[[2]] = extract(fitr.lnor)[["log_lik"]]
log_lik_list[[3]] = extract(fitr.llog)[["log_lik"]]
model_weights_1 <- model_weights(log_lik_list,method="stacking",optim_method = "CG")
model_weights_1 <- model_weights(log_lik_list,method="stacking",optim_method = "CG")
log_lik_list <- list()
log_lik_list[[1]] = extract(fitr.lnor)[["log_lik"]]
log_lik_list[[2]] = extract(fitr.llog)[["log_lik"]]
log_lik_list[[3]] = extract(fitr.lgum)[["log_lik"]]
log_lik_list <- list()
log_lik_list[[1]] = extract(fitr.lnor)[["log_lik"]]
log_lik_list[[2]] = extract(fitr.llog)[["log_lik"]]
log_lik_list[[3]] = extract(fitr.lgum)[["log_lik"]]
model_weights_1 <- model_weights(log_lik_list,method="stacking",optim_method = "CG")
model_weights_1 <- model_weights(log_lik_list,method="stacking",optim_method = "BFGS")
log_lik_list <- list()
log_lik_list[[1]] = extract(fitr.lnor)[["log_lik"]]
log_lik_list[[2]] = extract(fitr.llog)[["log_lik"]]
log_lik_list[[3]] = extract(fitr.lgum)[["log_lik"]]
log_lik_list[[4]] = extract(fitr.ldex)[["log_lik"]]
model_weights_1 <- model_weights(log_lik_list,method="stacking",optim_method = "CG")
log_lik_list[[5]] = extract(fitr.exmn)[["log_lik"]]
model_weights_1 <- model_weights(log_lik_list,method="stacking",optim_method = "CG")
model_weights_1 <- model_weights(log_lik_list,method="stacking",optim_method = "BFGS")
model_weights_1 <- model_weights(log_lik_list,method="stacking",optim_method = "CG")
model_weights_1 <- model_weights(log_lik_list,method="pseudobma",optim_method = "CG",BB=TRUE)
model_weights_1 <- model_weights(log_lik_list,method="stacking",optim_method = "CG")
library(survregma)
fitr.wei  =    sampling(stanmodels$wei,data=data_surv)
fitr.lnor =    sampling(stanmodels$lognormal,data=data_surv)
fitr.llog =    sampling(stanmodels$logistic,data=data_surv)
fitr.lgum =    sampling(stanmodels$loggumbel,data=data_surv)
fitr.ldex =    sampling(stanmodels$logdexp,data=data_surv)
fitr.igauss =    sampling(stanmodels$inv_gaussian,data=data_surv)
fitr.exmn =    sampling(stanmodels$expmodn,data=data_surv)
fitr.igauss
log_lik_list[[1]] = extract(fitr.lnor)[["log_lik"]]
log_lik_list[[2]] = extract(fitr.llog)[["log_lik"]]
log_lik_list[[3]] = extract(fitr.lgum)[["log_lik"]]
log_lik_list[[4]] = extract(fitr.ldex)[["log_lik"]]
log_lik_list[[6]] = extract(fitr.igauss)[["log_lik"]]
log_lik_list[[5]] = extract(fitr.exmn)[["log_lik"]]
model_weights_1 <- model_weights(log_lik_list,method="stacking",optim_method = "CG")
library(loo)
model_weights_1 <- model_weights(log_lik_list,method="stacking",optim_method = "CG")
log_lik_list <- list()
log_lik_list[[1]] = extract(fitr.lnor)[["log_lik"]]
log_lik_list[[2]] = extract(fitr.llog)[["log_lik"]]
log_lik_list[[3]] = extract(fitr.lgum)[["log_lik"]]
log_lik_list[[4]] = extract(fitr.ldex)[["log_lik"]]
log_lik_list[[5]] = extract(fitr.exmn)[["log_lik"]]
model_weights_1 <- model_weights(log_lik_list,method="stacking",optim_method = "CG")
