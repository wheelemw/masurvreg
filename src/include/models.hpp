
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_expmodn_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_expmodn");
    reader.add_event(94, 94, "end", "model_expmodn");
    return reader;
}

template <typename T0__, typename T1__, typename T2__, typename T3__>
std::vector<std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type> >
vexpmn_surv(const std::vector<T0__>& t,
                const std::vector<T1__>& nu,
                const std::vector<T2__>& mu,
                const std::vector<T3__>& sigma,
                const int& ROW,
                const int& COL, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
            validate_non_negative_index("output", "ROW", ROW);
            validate_non_negative_index("output", "COL", COL);
            vector<vector<fun_scalar_t__> > output(ROW, (vector<fun_scalar_t__>(COL)));
            stan::math::initialize(output, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(output,DUMMY_VAR__);


            for (int j = 1; j <= ROW; ++j) {

                for (int i = 1; i <= COL; ++i) {

                    stan::math::assign(get_base1_lhs(get_base1_lhs(output,j,"output",1),i,"output",2), exp(exp_mod_normal_ccdf_log(log(get_base1(t,i,"t",1)),get_base1(mu,j,"mu",1),exp(get_base1(sigma,j,"sigma",1)),get_base1(nu,j,"nu",1))));
                }
            }
            return stan::math::promote_scalar<fun_return_scalar_t__>(output);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct vexpmn_surv_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        std::vector<std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type> >
    operator()(const std::vector<T0__>& t,
                const std::vector<T1__>& nu,
                const std::vector<T2__>& mu,
                const std::vector<T3__>& sigma,
                const int& ROW,
                const int& COL, std::ostream* pstream__) const {
        return vexpmn_surv(t, nu, mu, sigma, ROW, COL, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
expmn_surv(const T0__& t,
               const T1__& nu,
               const T2__& mu,
               const T3__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(exp(exp_mod_normal_ccdf_log(log(t),mu,exp(sigma),nu)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct expmn_surv_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& t,
               const T1__& nu,
               const T2__& mu,
               const T3__& sigma, std::ostream* pstream__) const {
        return expmn_surv(t, nu, mu, sigma, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
log_expmn_right_censor(const T0__& t,
                           const T1__& nu,
                           const T2__& mu,
                           const T3__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(exp_mod_normal_ccdf_log(log(t),mu,exp(sigma),nu));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_expmn_right_censor_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& t,
                           const T1__& nu,
                           const T2__& mu,
                           const T3__& sigma, std::ostream* pstream__) const {
        return log_expmn_right_censor(t, nu, mu, sigma, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
log_expmn_left_censor(const T0__& t,
                          const T1__& nu,
                          const T2__& mu,
                          const T3__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(exp_mod_normal_cdf_log(log(t),mu,exp(sigma),nu));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_expmn_left_censor_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& t,
                          const T1__& nu,
                          const T2__& mu,
                          const T3__& sigma, std::ostream* pstream__) const {
        return log_expmn_left_censor(t, nu, mu, sigma, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
log_expmn_interval_censor(const T0__& lt,
                              const T1__& rt,
                              const T2__& nu,
                              const T3__& mu,
                              const T4__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(log((exp(exp_mod_normal_ccdf_log(log(lt),mu,exp(sigma),nu)) - exp(exp_mod_normal_ccdf_log(log(rt),mu,exp(sigma),nu)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_expmn_interval_censor_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__, typename T4__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__, typename boost::math::tools::promote_args<T4__>::type>::type
    operator()(const T0__& lt,
                              const T1__& rt,
                              const T2__& nu,
                              const T3__& mu,
                              const T4__& sigma, std::ostream* pstream__) const {
        return log_expmn_interval_censor(lt, rt, nu, mu, sigma, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
log_expmn_exact_lifetime(const T0__& t,
                             const T1__& nu,
                             const T2__& mu,
                             const T3__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(exp_mod_normal_log(log(t),mu,exp(sigma),nu));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_expmn_exact_lifetime_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& t,
                             const T1__& nu,
                             const T2__& mu,
                             const T3__& sigma, std::ostream* pstream__) const {
        return log_expmn_exact_lifetime(t, nu, mu, sigma, pstream__);
    }
};

class model_expmodn : public prob_grad {
private:
    int N;
    int N_GROUPS;
    vector<vector<double> > t;
    vector<double> CENC;
    vector<int> ID;
public:
    model_expmodn(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_expmodn(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_expmodn_namespace::model_expmodn";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N_GROUPS", "int", context__.to_vec());
        N_GROUPS = int(0);
        vals_i__ = context__.vals_i("N_GROUPS");
        pos__ = 0;
        N_GROUPS = vals_i__[pos__++];
        validate_non_negative_index("t", "N", N);
        validate_non_negative_index("t", "2", 2);
        context__.validate_dims("data initialization", "t", "double", context__.to_vec(N,2));
        validate_non_negative_index("t", "N", N);
        validate_non_negative_index("t", "2", 2);
        t = std::vector<std::vector<double> >(N,std::vector<double>(2,double(0)));
        vals_r__ = context__.vals_r("t");
        pos__ = 0;
        size_t t_limit_1__ = 2;
        for (size_t i_1__ = 0; i_1__ < t_limit_1__; ++i_1__) {
            size_t t_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < t_limit_0__; ++i_0__) {
                t[i_0__][i_1__] = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("CENC", "N", N);
        context__.validate_dims("data initialization", "CENC", "double", context__.to_vec(N));
        validate_non_negative_index("CENC", "N", N);
        CENC = std::vector<double>(N,double(0));
        vals_r__ = context__.vals_r("CENC");
        pos__ = 0;
        size_t CENC_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < CENC_limit_0__; ++i_0__) {
            CENC[i_0__] = vals_r__[pos__++];
        }
        validate_non_negative_index("ID", "N", N);
        context__.validate_dims("data initialization", "ID", "int", context__.to_vec(N));
        validate_non_negative_index("ID", "N", N);
        ID = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("ID");
        pos__ = 0;
        size_t ID_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < ID_limit_0__; ++i_0__) {
            ID[i_0__] = vals_i__[pos__++];
        }

        // validate, data variables
        check_greater_or_equal(function__,"N",N,0);
        check_greater_or_equal(function__,"N_GROUPS",N_GROUPS,1);
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"ID[k0__]",ID[k0__],1);
        }
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        validate_non_negative_index("l_reff", "N_GROUPS", N_GROUPS);
        num_params_r__ += N_GROUPS;
    }

    ~model_expmodn() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("nu")))
            throw std::runtime_error("variable nu missing");
        vals_r__ = context__.vals_r("nu");
        pos__ = 0U;
        context__.validate_dims("initialization", "nu", "double", context__.to_vec());
        // generate_declaration nu
        double nu(0);
        nu = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(nu);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable nu: ") + e.what());
        }

        if (!(context__.contains_r("l")))
            throw std::runtime_error("variable l missing");
        vals_r__ = context__.vals_r("l");
        pos__ = 0U;
        context__.validate_dims("initialization", "l", "double", context__.to_vec());
        // generate_declaration l
        double l(0);
        l = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(l);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable l: ") + e.what());
        }

        if (!(context__.contains_r("b")))
            throw std::runtime_error("variable b missing");
        vals_r__ = context__.vals_r("b");
        pos__ = 0U;
        context__.validate_dims("initialization", "b", "double", context__.to_vec());
        // generate_declaration b
        double b(0);
        b = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(b);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b: ") + e.what());
        }

        if (!(context__.contains_r("lsig_sq")))
            throw std::runtime_error("variable lsig_sq missing");
        vals_r__ = context__.vals_r("lsig_sq");
        pos__ = 0U;
        context__.validate_dims("initialization", "lsig_sq", "double", context__.to_vec());
        // generate_declaration lsig_sq
        double lsig_sq(0);
        lsig_sq = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0,4,lsig_sq);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable lsig_sq: ") + e.what());
        }

        if (!(context__.contains_r("l_reff")))
            throw std::runtime_error("variable l_reff missing");
        vals_r__ = context__.vals_r("l_reff");
        pos__ = 0U;
        validate_non_negative_index("l_reff", "N_GROUPS", N_GROUPS);
        context__.validate_dims("initialization", "l_reff", "double", context__.to_vec(N_GROUPS));
        // generate_declaration l_reff
        std::vector<double> l_reff(N_GROUPS,double(0));
        for (int i0__ = 0U; i0__ < N_GROUPS; ++i0__)
            l_reff[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < N_GROUPS; ++i0__)
            try {
            writer__.scalar_unconstrain(l_reff[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable l_reff: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ nu;
        (void) nu;  // dummy to suppress unused var warning
        if (jacobian__)
            nu = in__.scalar_constrain(lp__);
        else
            nu = in__.scalar_constrain();

        T__ l;
        (void) l;  // dummy to suppress unused var warning
        if (jacobian__)
            l = in__.scalar_constrain(lp__);
        else
            l = in__.scalar_constrain();

        T__ b;
        (void) b;  // dummy to suppress unused var warning
        if (jacobian__)
            b = in__.scalar_constrain(lp__);
        else
            b = in__.scalar_constrain();

        T__ lsig_sq;
        (void) lsig_sq;  // dummy to suppress unused var warning
        if (jacobian__)
            lsig_sq = in__.scalar_lub_constrain(0,4,lp__);
        else
            lsig_sq = in__.scalar_lub_constrain(0,4);

        vector<T__> l_reff;
        size_t dim_l_reff_0__ = N_GROUPS;
        l_reff.reserve(dim_l_reff_0__);
        for (size_t k_0__ = 0; k_0__ < dim_l_reff_0__; ++k_0__) {
            if (jacobian__)
                l_reff.push_back(in__.scalar_constrain(lp__));
            else
                l_reff.push_back(in__.scalar_constrain());
        }


        // transformed parameters


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            lp_accum__.add(normal_log<propto__>(l, 0, 10));
            lp_accum__.add(normal_log<propto__>(b, 0, 1));
            lp_accum__.add(normal_log<propto__>(l_reff, 0, sqrt(lsig_sq)));
            lp_accum__.add(gamma_log<propto__>(lsig_sq, 1, 1));
            lp_accum__.add(gamma_log<propto__>(nu, 1, 1));
            for (int i = 1; i <= N; ++i) {

                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),0))) {
                    lp_accum__.add(log_expmn_right_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),nu,(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),1))) {
                    lp_accum__.add(log_expmn_exact_lifetime(get_base1(get_base1(t,i,"t",1),1,"t",2),nu,(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),2))) {
                    lp_accum__.add(log_expmn_left_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),nu,(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),3))) {
                    lp_accum__.add(log_expmn_interval_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),get_base1(get_base1(t,i,"t",1),2,"t",2),nu,(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("nu");
        names__.push_back("l");
        names__.push_back("b");
        names__.push_back("lsig_sq");
        names__.push_back("l_reff");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_GROUPS);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_expmodn_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double nu = in__.scalar_constrain();
        double l = in__.scalar_constrain();
        double b = in__.scalar_constrain();
        double lsig_sq = in__.scalar_lub_constrain(0,4);
        vector<double> l_reff;
        size_t dim_l_reff_0__ = N_GROUPS;
        for (size_t k_0__ = 0; k_0__ < dim_l_reff_0__; ++k_0__) {
            l_reff.push_back(in__.scalar_constrain());
        }
        vars__.push_back(nu);
        vars__.push_back(l);
        vars__.push_back(b);
        vars__.push_back(lsig_sq);
        for (int k_0__ = 0; k_0__ < N_GROUPS; ++k_0__) {
            vars__.push_back(l_reff[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning



        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters

        if (!include_gqs__) return;
        // declare and define generated quantities
        validate_non_negative_index("log_lik", "N", N);
        vector_d log_lik(static_cast<Eigen::VectorXd::Index>(N));
        (void) log_lik;  // dummy to suppress unused var warning

        stan::math::initialize(log_lik, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(log_lik,DUMMY_VAR__);


        try {
            for (int i = 1; i <= N; ++i) {

                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),0))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_expmn_right_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),nu,(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),1))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_expmn_exact_lifetime(get_base1(get_base1(t,i,"t",1),1,"t",2),nu,(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),2))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_expmn_left_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),nu,(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),3))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_expmn_interval_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),get_base1(get_base1(t,i,"t",1),2,"t",2),nu,(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_expmodn";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "nu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "l";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lsig_sq";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_GROUPS; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "l_reff" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "nu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "l";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lsig_sq";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_GROUPS; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "l_reff" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}




// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_inv_gaussian_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_inv_gaussian");
    reader.add_event(91, 91, "end", "model_inv_gaussian");
    return reader;
}

template <typename T0__, typename T1__, typename T2__>
std::vector<std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type> >
vigauss_surv(const std::vector<T0__>& t,
                 const std::vector<T1__>& mu,
                 const std::vector<T2__>& alpha,
                 const int& ROW,
                 const int& COL, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
            validate_non_negative_index("output", "ROW", ROW);
            validate_non_negative_index("output", "COL", COL);
            vector<vector<fun_scalar_t__> > output(ROW, (vector<fun_scalar_t__>(COL)));
            stan::math::initialize(output, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(output,DUMMY_VAR__);


            for (int j = 1; j <= ROW; ++j) {

                for (int i = 1; i <= COL; ++i) {

                    stan::math::assign(get_base1_lhs(get_base1_lhs(output,j,"output",1),i,"output",2), (normal_cdf((sqrt((exp(get_base1(alpha,j,"alpha",1)) / get_base1(t,i,"t",1))) * (1 - (get_base1(t,i,"t",1) / exp(get_base1(mu,j,"mu",1))))),0,1) - (exp((2 * exp((get_base1(alpha,j,"alpha",1) - get_base1(mu,j,"mu",1))))) * normal_cdf((-(sqrt((exp(get_base1(alpha,j,"alpha",1)) / get_base1(t,i,"t",1)))) * (1 + (get_base1(t,i,"t",1) / exp(get_base1(mu,j,"mu",1))))),0,1))));
                }
            }
            return stan::math::promote_scalar<fun_return_scalar_t__>(output);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct vigauss_surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        std::vector<std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type> >
    operator()(const std::vector<T0__>& t,
                 const std::vector<T1__>& mu,
                 const std::vector<T2__>& alpha,
                 const int& ROW,
                 const int& COL, std::ostream* pstream__) const {
        return vigauss_surv(t, mu, alpha, ROW, COL, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
igauss_surv(const T0__& t,
                const T1__& mu,
                const T2__& alpha, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>((normal_cdf((sqrt((exp(alpha) / t)) * (1 - (t / exp(mu)))),0,1) - (exp((2 * exp((alpha - mu)))) * normal_cdf((-(sqrt((exp(alpha) / t))) * (1 + (t / exp(mu)))),0,1))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct igauss_surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                const T1__& mu,
                const T2__& alpha, std::ostream* pstream__) const {
        return igauss_surv(t, mu, alpha, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
log_igauss_right_censor(const T0__& t,
                            const T1__& mu,
                            const T2__& alpha, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(log(igauss_surv(t,mu,alpha, pstream__)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_igauss_right_censor_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                            const T1__& mu,
                            const T2__& alpha, std::ostream* pstream__) const {
        return log_igauss_right_censor(t, mu, alpha, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
log_igauss_left_censor(const T0__& t,
                           const T1__& mu,
                           const T2__& alpha, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(log((1 - igauss_surv(t,mu,alpha, pstream__))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_igauss_left_censor_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                           const T1__& mu,
                           const T2__& alpha, std::ostream* pstream__) const {
        return log_igauss_left_censor(t, mu, alpha, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
log_igauss_interval_censor(const T0__& tl,
                               const T1__& tr,
                               const T2__& mu,
                               const T3__& alpha, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(log((igauss_surv(tl,mu,alpha, pstream__) - igauss_surv(tr,mu,alpha, pstream__))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_igauss_interval_censor_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& tl,
                               const T1__& tr,
                               const T2__& mu,
                               const T3__& alpha, std::ostream* pstream__) const {
        return log_igauss_interval_censor(tl, tr, mu, alpha, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
log_igauss_exact_lifetime(const T0__& t,
                              const T1__& mu,
                              const T2__& alpha, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(((0.5 * (log(exp(alpha)) - log(((2 * 3.1415926500000002) * pow(t,3))))) - ((alpha * pow((t - exp(mu)),2)) / ((2 * pow(exp(mu),2)) * t))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_igauss_exact_lifetime_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                              const T1__& mu,
                              const T2__& alpha, std::ostream* pstream__) const {
        return log_igauss_exact_lifetime(t, mu, alpha, pstream__);
    }
};

class model_inv_gaussian : public prob_grad {
private:
    int N;
    int N_GROUPS;
    vector<vector<double> > t;
    vector<double> CENC;
    vector<int> ID;
public:
    model_inv_gaussian(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_inv_gaussian(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_inv_gaussian_namespace::model_inv_gaussian";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N_GROUPS", "int", context__.to_vec());
        N_GROUPS = int(0);
        vals_i__ = context__.vals_i("N_GROUPS");
        pos__ = 0;
        N_GROUPS = vals_i__[pos__++];
        validate_non_negative_index("t", "N", N);
        validate_non_negative_index("t", "2", 2);
        context__.validate_dims("data initialization", "t", "double", context__.to_vec(N,2));
        validate_non_negative_index("t", "N", N);
        validate_non_negative_index("t", "2", 2);
        t = std::vector<std::vector<double> >(N,std::vector<double>(2,double(0)));
        vals_r__ = context__.vals_r("t");
        pos__ = 0;
        size_t t_limit_1__ = 2;
        for (size_t i_1__ = 0; i_1__ < t_limit_1__; ++i_1__) {
            size_t t_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < t_limit_0__; ++i_0__) {
                t[i_0__][i_1__] = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("CENC", "N", N);
        context__.validate_dims("data initialization", "CENC", "double", context__.to_vec(N));
        validate_non_negative_index("CENC", "N", N);
        CENC = std::vector<double>(N,double(0));
        vals_r__ = context__.vals_r("CENC");
        pos__ = 0;
        size_t CENC_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < CENC_limit_0__; ++i_0__) {
            CENC[i_0__] = vals_r__[pos__++];
        }
        validate_non_negative_index("ID", "N", N);
        context__.validate_dims("data initialization", "ID", "int", context__.to_vec(N));
        validate_non_negative_index("ID", "N", N);
        ID = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("ID");
        pos__ = 0;
        size_t ID_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < ID_limit_0__; ++i_0__) {
            ID[i_0__] = vals_i__[pos__++];
        }

        // validate, data variables
        check_greater_or_equal(function__,"N",N,0);
        check_greater_or_equal(function__,"N_GROUPS",N_GROUPS,1);
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"ID[k0__]",ID[k0__],1);
        }
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        validate_non_negative_index("l_reff", "N_GROUPS", N_GROUPS);
        num_params_r__ += N_GROUPS;
    }

    ~model_inv_gaussian() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("l")))
            throw std::runtime_error("variable l missing");
        vals_r__ = context__.vals_r("l");
        pos__ = 0U;
        context__.validate_dims("initialization", "l", "double", context__.to_vec());
        // generate_declaration l
        double l(0);
        l = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(l);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable l: ") + e.what());
        }

        if (!(context__.contains_r("b")))
            throw std::runtime_error("variable b missing");
        vals_r__ = context__.vals_r("b");
        pos__ = 0U;
        context__.validate_dims("initialization", "b", "double", context__.to_vec());
        // generate_declaration b
        double b(0);
        b = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(b);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b: ") + e.what());
        }

        if (!(context__.contains_r("lsig_sq")))
            throw std::runtime_error("variable lsig_sq missing");
        vals_r__ = context__.vals_r("lsig_sq");
        pos__ = 0U;
        context__.validate_dims("initialization", "lsig_sq", "double", context__.to_vec());
        // generate_declaration lsig_sq
        double lsig_sq(0);
        lsig_sq = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0,2,lsig_sq);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable lsig_sq: ") + e.what());
        }

        if (!(context__.contains_r("l_reff")))
            throw std::runtime_error("variable l_reff missing");
        vals_r__ = context__.vals_r("l_reff");
        pos__ = 0U;
        validate_non_negative_index("l_reff", "N_GROUPS", N_GROUPS);
        context__.validate_dims("initialization", "l_reff", "double", context__.to_vec(N_GROUPS));
        // generate_declaration l_reff
        std::vector<double> l_reff(N_GROUPS,double(0));
        for (int i0__ = 0U; i0__ < N_GROUPS; ++i0__)
            l_reff[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < N_GROUPS; ++i0__)
            try {
            writer__.scalar_unconstrain(l_reff[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable l_reff: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ l;
        (void) l;  // dummy to suppress unused var warning
        if (jacobian__)
            l = in__.scalar_constrain(lp__);
        else
            l = in__.scalar_constrain();

        T__ b;
        (void) b;  // dummy to suppress unused var warning
        if (jacobian__)
            b = in__.scalar_constrain(lp__);
        else
            b = in__.scalar_constrain();

        T__ lsig_sq;
        (void) lsig_sq;  // dummy to suppress unused var warning
        if (jacobian__)
            lsig_sq = in__.scalar_lub_constrain(0,2,lp__);
        else
            lsig_sq = in__.scalar_lub_constrain(0,2);

        vector<T__> l_reff;
        size_t dim_l_reff_0__ = N_GROUPS;
        l_reff.reserve(dim_l_reff_0__);
        for (size_t k_0__ = 0; k_0__ < dim_l_reff_0__; ++k_0__) {
            if (jacobian__)
                l_reff.push_back(in__.scalar_constrain(lp__));
            else
                l_reff.push_back(in__.scalar_constrain());
        }


        // transformed parameters


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            lp_accum__.add(normal_log<propto__>(l, 0, 10));
            lp_accum__.add(normal_log<propto__>(b, 0, 1));
            lp_accum__.add(normal_log<propto__>(l_reff, 0, sqrt(lsig_sq)));
            lp_accum__.add(gamma_log<propto__>(lsig_sq, 1, 1));
            for (int i = 1; i <= N; ++i) {

                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),0))) {
                    lp_accum__.add(log_igauss_right_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),1))) {
                    lp_accum__.add(log_igauss_exact_lifetime(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),2))) {
                    lp_accum__.add(log_igauss_left_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),3))) {
                    lp_accum__.add(log_igauss_interval_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),get_base1(get_base1(t,i,"t",1),2,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("l");
        names__.push_back("b");
        names__.push_back("lsig_sq");
        names__.push_back("l_reff");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_GROUPS);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_inv_gaussian_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double l = in__.scalar_constrain();
        double b = in__.scalar_constrain();
        double lsig_sq = in__.scalar_lub_constrain(0,2);
        vector<double> l_reff;
        size_t dim_l_reff_0__ = N_GROUPS;
        for (size_t k_0__ = 0; k_0__ < dim_l_reff_0__; ++k_0__) {
            l_reff.push_back(in__.scalar_constrain());
        }
        vars__.push_back(l);
        vars__.push_back(b);
        vars__.push_back(lsig_sq);
        for (int k_0__ = 0; k_0__ < N_GROUPS; ++k_0__) {
            vars__.push_back(l_reff[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning



        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters

        if (!include_gqs__) return;
        // declare and define generated quantities
        validate_non_negative_index("log_lik", "N", N);
        vector_d log_lik(static_cast<Eigen::VectorXd::Index>(N));
        (void) log_lik;  // dummy to suppress unused var warning

        stan::math::initialize(log_lik, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(log_lik,DUMMY_VAR__);


        try {
            for (int i = 1; i <= N; ++i) {

                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),0))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_igauss_right_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),1))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_igauss_exact_lifetime(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),2))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_igauss_left_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),3))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_igauss_interval_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),get_base1(get_base1(t,i,"t",1),2,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_inv_gaussian";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "l";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lsig_sq";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_GROUPS; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "l_reff" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "l";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lsig_sq";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_GROUPS; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "l_reff" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}




// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_logdexp_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_logdexp");
    reader.add_event(90, 90, "end", "model_logdexp");
    return reader;
}

template <typename T0__, typename T1__, typename T2__>
std::vector<std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type> >
vdexp_surv(const std::vector<T0__>& t,
               const std::vector<T1__>& mu,
               const std::vector<T2__>& sigma,
               const int& ROW,
               const int& COL, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
            validate_non_negative_index("output", "ROW", ROW);
            validate_non_negative_index("output", "COL", COL);
            vector<vector<fun_scalar_t__> > output(ROW, (vector<fun_scalar_t__>(COL)));
            stan::math::initialize(output, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(output,DUMMY_VAR__);


            for (int j = 1; j <= ROW; ++j) {

                for (int i = 1; i <= COL; ++i) {

                    stan::math::assign(get_base1_lhs(get_base1_lhs(output,j,"output",1),i,"output",2), exp(double_exponential_ccdf_log(log(get_base1(t,i,"t",1)),get_base1(mu,j,"mu",1),exp(get_base1(sigma,j,"sigma",1)))));
                }
            }
            return stan::math::promote_scalar<fun_return_scalar_t__>(output);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct vdexp_surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        std::vector<std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type> >
    operator()(const std::vector<T0__>& t,
               const std::vector<T1__>& mu,
               const std::vector<T2__>& sigma,
               const int& ROW,
               const int& COL, std::ostream* pstream__) const {
        return vdexp_surv(t, mu, sigma, ROW, COL, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
ldexp_surv(const T0__& t,
               const T1__& mu,
               const T2__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(exp(double_exponential_ccdf_log(log(t),mu,exp(sigma))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct ldexp_surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
               const T1__& mu,
               const T2__& sigma, std::ostream* pstream__) const {
        return ldexp_surv(t, mu, sigma, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
log_ldexp_right_censor(const T0__& t,
                           const T1__& mu,
                           const T2__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(double_exponential_ccdf_log(log(t),mu,exp(sigma)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_ldexp_right_censor_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                           const T1__& mu,
                           const T2__& sigma, std::ostream* pstream__) const {
        return log_ldexp_right_censor(t, mu, sigma, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
log_ldexp_left_censor(const T0__& t,
                          const T1__& mu,
                          const T2__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(double_exponential_cdf_log(log(t),mu,exp(sigma)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_ldexp_left_censor_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                          const T1__& mu,
                          const T2__& sigma, std::ostream* pstream__) const {
        return log_ldexp_left_censor(t, mu, sigma, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
log_ldexp_interval_censor(const T0__& lt,
                              const T1__& rt,
                              const T2__& mu,
                              const T3__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(log((exp(double_exponential_ccdf_log(log(lt),mu,exp(sigma))) - exp(double_exponential_ccdf_log(log(rt),mu,exp(sigma))))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_ldexp_interval_censor_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& lt,
                              const T1__& rt,
                              const T2__& mu,
                              const T3__& sigma, std::ostream* pstream__) const {
        return log_ldexp_interval_censor(lt, rt, mu, sigma, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
log_ldexp_exact_lifetime(const T0__& t,
                             const T1__& mu,
                             const T2__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(double_exponential_log(log(t),mu,exp(sigma)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_ldexp_exact_lifetime_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                             const T1__& mu,
                             const T2__& sigma, std::ostream* pstream__) const {
        return log_ldexp_exact_lifetime(t, mu, sigma, pstream__);
    }
};

class model_logdexp : public prob_grad {
private:
    int N;
    int N_GROUPS;
    vector<vector<double> > t;
    vector<double> CENC;
    vector<int> ID;
public:
    model_logdexp(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_logdexp(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_logdexp_namespace::model_logdexp";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N_GROUPS", "int", context__.to_vec());
        N_GROUPS = int(0);
        vals_i__ = context__.vals_i("N_GROUPS");
        pos__ = 0;
        N_GROUPS = vals_i__[pos__++];
        validate_non_negative_index("t", "N", N);
        validate_non_negative_index("t", "2", 2);
        context__.validate_dims("data initialization", "t", "double", context__.to_vec(N,2));
        validate_non_negative_index("t", "N", N);
        validate_non_negative_index("t", "2", 2);
        t = std::vector<std::vector<double> >(N,std::vector<double>(2,double(0)));
        vals_r__ = context__.vals_r("t");
        pos__ = 0;
        size_t t_limit_1__ = 2;
        for (size_t i_1__ = 0; i_1__ < t_limit_1__; ++i_1__) {
            size_t t_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < t_limit_0__; ++i_0__) {
                t[i_0__][i_1__] = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("CENC", "N", N);
        context__.validate_dims("data initialization", "CENC", "double", context__.to_vec(N));
        validate_non_negative_index("CENC", "N", N);
        CENC = std::vector<double>(N,double(0));
        vals_r__ = context__.vals_r("CENC");
        pos__ = 0;
        size_t CENC_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < CENC_limit_0__; ++i_0__) {
            CENC[i_0__] = vals_r__[pos__++];
        }
        validate_non_negative_index("ID", "N", N);
        context__.validate_dims("data initialization", "ID", "int", context__.to_vec(N));
        validate_non_negative_index("ID", "N", N);
        ID = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("ID");
        pos__ = 0;
        size_t ID_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < ID_limit_0__; ++i_0__) {
            ID[i_0__] = vals_i__[pos__++];
        }

        // validate, data variables
        check_greater_or_equal(function__,"N",N,0);
        check_greater_or_equal(function__,"N_GROUPS",N_GROUPS,1);
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"ID[k0__]",ID[k0__],1);
        }
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        validate_non_negative_index("l_reff", "N_GROUPS", N_GROUPS);
        num_params_r__ += N_GROUPS;
    }

    ~model_logdexp() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("l")))
            throw std::runtime_error("variable l missing");
        vals_r__ = context__.vals_r("l");
        pos__ = 0U;
        context__.validate_dims("initialization", "l", "double", context__.to_vec());
        // generate_declaration l
        double l(0);
        l = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(l);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable l: ") + e.what());
        }

        if (!(context__.contains_r("b")))
            throw std::runtime_error("variable b missing");
        vals_r__ = context__.vals_r("b");
        pos__ = 0U;
        context__.validate_dims("initialization", "b", "double", context__.to_vec());
        // generate_declaration b
        double b(0);
        b = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(b);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b: ") + e.what());
        }

        if (!(context__.contains_r("lsig_sq")))
            throw std::runtime_error("variable lsig_sq missing");
        vals_r__ = context__.vals_r("lsig_sq");
        pos__ = 0U;
        context__.validate_dims("initialization", "lsig_sq", "double", context__.to_vec());
        // generate_declaration lsig_sq
        double lsig_sq(0);
        lsig_sq = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0,4,lsig_sq);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable lsig_sq: ") + e.what());
        }

        if (!(context__.contains_r("l_reff")))
            throw std::runtime_error("variable l_reff missing");
        vals_r__ = context__.vals_r("l_reff");
        pos__ = 0U;
        validate_non_negative_index("l_reff", "N_GROUPS", N_GROUPS);
        context__.validate_dims("initialization", "l_reff", "double", context__.to_vec(N_GROUPS));
        // generate_declaration l_reff
        std::vector<double> l_reff(N_GROUPS,double(0));
        for (int i0__ = 0U; i0__ < N_GROUPS; ++i0__)
            l_reff[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < N_GROUPS; ++i0__)
            try {
            writer__.scalar_unconstrain(l_reff[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable l_reff: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ l;
        (void) l;  // dummy to suppress unused var warning
        if (jacobian__)
            l = in__.scalar_constrain(lp__);
        else
            l = in__.scalar_constrain();

        T__ b;
        (void) b;  // dummy to suppress unused var warning
        if (jacobian__)
            b = in__.scalar_constrain(lp__);
        else
            b = in__.scalar_constrain();

        T__ lsig_sq;
        (void) lsig_sq;  // dummy to suppress unused var warning
        if (jacobian__)
            lsig_sq = in__.scalar_lub_constrain(0,4,lp__);
        else
            lsig_sq = in__.scalar_lub_constrain(0,4);

        vector<T__> l_reff;
        size_t dim_l_reff_0__ = N_GROUPS;
        l_reff.reserve(dim_l_reff_0__);
        for (size_t k_0__ = 0; k_0__ < dim_l_reff_0__; ++k_0__) {
            if (jacobian__)
                l_reff.push_back(in__.scalar_constrain(lp__));
            else
                l_reff.push_back(in__.scalar_constrain());
        }


        // transformed parameters


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            lp_accum__.add(normal_log<propto__>(l_reff, 0, lsig_sq));
            lp_accum__.add(normal_log<propto__>(b, 0, 10));
            lp_accum__.add(gamma_log<propto__>(lsig_sq, 1, 1));
            lp_accum__.add(normal_log<propto__>(l, 0, 1));
            for (int i = 1; i <= N; ++i) {

                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),0))) {
                    lp_accum__.add(log_ldexp_right_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),1))) {
                    lp_accum__.add(log_ldexp_exact_lifetime(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),2))) {
                    lp_accum__.add(log_ldexp_left_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),3))) {
                    lp_accum__.add(log_ldexp_interval_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),get_base1(get_base1(t,i,"t",1),2,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("l");
        names__.push_back("b");
        names__.push_back("lsig_sq");
        names__.push_back("l_reff");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_GROUPS);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_logdexp_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double l = in__.scalar_constrain();
        double b = in__.scalar_constrain();
        double lsig_sq = in__.scalar_lub_constrain(0,4);
        vector<double> l_reff;
        size_t dim_l_reff_0__ = N_GROUPS;
        for (size_t k_0__ = 0; k_0__ < dim_l_reff_0__; ++k_0__) {
            l_reff.push_back(in__.scalar_constrain());
        }
        vars__.push_back(l);
        vars__.push_back(b);
        vars__.push_back(lsig_sq);
        for (int k_0__ = 0; k_0__ < N_GROUPS; ++k_0__) {
            vars__.push_back(l_reff[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning



        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters

        if (!include_gqs__) return;
        // declare and define generated quantities
        validate_non_negative_index("log_lik", "N", N);
        vector_d log_lik(static_cast<Eigen::VectorXd::Index>(N));
        (void) log_lik;  // dummy to suppress unused var warning

        stan::math::initialize(log_lik, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(log_lik,DUMMY_VAR__);


        try {
            for (int i = 1; i <= N; ++i) {

                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),0))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_ldexp_right_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),1))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_ldexp_exact_lifetime(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),2))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_ldexp_left_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),3))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_ldexp_interval_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),get_base1(get_base1(t,i,"t",1),2,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_logdexp";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "l";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lsig_sq";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_GROUPS; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "l_reff" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "l";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lsig_sq";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_GROUPS; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "l_reff" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}




// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_loggumbel_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_loggumbel");
    reader.add_event(92, 92, "end", "model_loggumbel");
    return reader;
}

template <typename T0__, typename T1__, typename T2__>
std::vector<std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type> >
vlgum_surv(const std::vector<T0__>& t,
               const std::vector<T1__>& mu,
               const std::vector<T2__>& sigma,
               const int& ROW,
               const int& COL, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
            validate_non_negative_index("output", "ROW", ROW);
            validate_non_negative_index("output", "COL", COL);
            vector<vector<fun_scalar_t__> > output(ROW, (vector<fun_scalar_t__>(COL)));
            stan::math::initialize(output, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(output,DUMMY_VAR__);


            for (int j = 1; j <= ROW; ++j) {

                for (int i = 1; i <= COL; ++i) {

                    stan::math::assign(get_base1_lhs(get_base1_lhs(output,j,"output",1),i,"output",2), exp(gumbel_ccdf_log(log(get_base1(t,i,"t",1)),get_base1(mu,j,"mu",1),exp(get_base1(sigma,j,"sigma",1)))));
                }
            }
            return stan::math::promote_scalar<fun_return_scalar_t__>(output);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct vlgum_surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        std::vector<std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type> >
    operator()(const std::vector<T0__>& t,
               const std::vector<T1__>& mu,
               const std::vector<T2__>& sigma,
               const int& ROW,
               const int& COL, std::ostream* pstream__) const {
        return vlgum_surv(t, mu, sigma, ROW, COL, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
lgum_surv(const T0__& t,
              const T1__& mu,
              const T2__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(exp(gumbel_ccdf_log(log(t),mu,exp(sigma))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct lgum_surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
              const T1__& mu,
              const T2__& sigma, std::ostream* pstream__) const {
        return lgum_surv(t, mu, sigma, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
log_lgum_right_censor(const T0__& t,
                          const T1__& mu,
                          const T2__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(gumbel_ccdf_log(log(t),mu,exp(sigma)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_lgum_right_censor_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                          const T1__& mu,
                          const T2__& sigma, std::ostream* pstream__) const {
        return log_lgum_right_censor(t, mu, sigma, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
log_lgum_left_censor(const T0__& t,
                         const T1__& mu,
                         const T2__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(gumbel_cdf_log(log(t),mu,exp(sigma)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_lgum_left_censor_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                         const T1__& mu,
                         const T2__& sigma, std::ostream* pstream__) const {
        return log_lgum_left_censor(t, mu, sigma, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
log_lgum_interval_censor(const T0__& lt,
                             const T1__& rt,
                             const T2__& mu,
                             const T3__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(log((exp(gumbel_ccdf_log(log(lt),mu,exp(sigma))) - exp(gumbel_ccdf_log(log(rt),mu,exp(sigma))))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_lgum_interval_censor_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& lt,
                             const T1__& rt,
                             const T2__& mu,
                             const T3__& sigma, std::ostream* pstream__) const {
        return log_lgum_interval_censor(lt, rt, mu, sigma, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
log_lgum_exact_lifetime(const T0__& t,
                            const T1__& mu,
                            const T2__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(gumbel_log(log(t),mu,exp(sigma)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_lgum_exact_lifetime_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                            const T1__& mu,
                            const T2__& sigma, std::ostream* pstream__) const {
        return log_lgum_exact_lifetime(t, mu, sigma, pstream__);
    }
};

class model_loggumbel : public prob_grad {
private:
    int N;
    int N_GROUPS;
    vector<vector<double> > t;
    vector<double> CENC;
    vector<int> ID;
public:
    model_loggumbel(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_loggumbel(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_loggumbel_namespace::model_loggumbel";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N_GROUPS", "int", context__.to_vec());
        N_GROUPS = int(0);
        vals_i__ = context__.vals_i("N_GROUPS");
        pos__ = 0;
        N_GROUPS = vals_i__[pos__++];
        validate_non_negative_index("t", "N", N);
        validate_non_negative_index("t", "2", 2);
        context__.validate_dims("data initialization", "t", "double", context__.to_vec(N,2));
        validate_non_negative_index("t", "N", N);
        validate_non_negative_index("t", "2", 2);
        t = std::vector<std::vector<double> >(N,std::vector<double>(2,double(0)));
        vals_r__ = context__.vals_r("t");
        pos__ = 0;
        size_t t_limit_1__ = 2;
        for (size_t i_1__ = 0; i_1__ < t_limit_1__; ++i_1__) {
            size_t t_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < t_limit_0__; ++i_0__) {
                t[i_0__][i_1__] = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("CENC", "N", N);
        context__.validate_dims("data initialization", "CENC", "double", context__.to_vec(N));
        validate_non_negative_index("CENC", "N", N);
        CENC = std::vector<double>(N,double(0));
        vals_r__ = context__.vals_r("CENC");
        pos__ = 0;
        size_t CENC_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < CENC_limit_0__; ++i_0__) {
            CENC[i_0__] = vals_r__[pos__++];
        }
        validate_non_negative_index("ID", "N", N);
        context__.validate_dims("data initialization", "ID", "int", context__.to_vec(N));
        validate_non_negative_index("ID", "N", N);
        ID = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("ID");
        pos__ = 0;
        size_t ID_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < ID_limit_0__; ++i_0__) {
            ID[i_0__] = vals_i__[pos__++];
        }

        // validate, data variables
        check_greater_or_equal(function__,"N",N,0);
        check_greater_or_equal(function__,"N_GROUPS",N_GROUPS,1);
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"ID[k0__]",ID[k0__],1);
        }
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        validate_non_negative_index("l_reff", "N_GROUPS", N_GROUPS);
        num_params_r__ += N_GROUPS;
    }

    ~model_loggumbel() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("l")))
            throw std::runtime_error("variable l missing");
        vals_r__ = context__.vals_r("l");
        pos__ = 0U;
        context__.validate_dims("initialization", "l", "double", context__.to_vec());
        // generate_declaration l
        double l(0);
        l = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(l);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable l: ") + e.what());
        }

        if (!(context__.contains_r("b")))
            throw std::runtime_error("variable b missing");
        vals_r__ = context__.vals_r("b");
        pos__ = 0U;
        context__.validate_dims("initialization", "b", "double", context__.to_vec());
        // generate_declaration b
        double b(0);
        b = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(b);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b: ") + e.what());
        }

        if (!(context__.contains_r("lsig_sq")))
            throw std::runtime_error("variable lsig_sq missing");
        vals_r__ = context__.vals_r("lsig_sq");
        pos__ = 0U;
        context__.validate_dims("initialization", "lsig_sq", "double", context__.to_vec());
        // generate_declaration lsig_sq
        double lsig_sq(0);
        lsig_sq = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0,4,lsig_sq);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable lsig_sq: ") + e.what());
        }

        if (!(context__.contains_r("l_reff")))
            throw std::runtime_error("variable l_reff missing");
        vals_r__ = context__.vals_r("l_reff");
        pos__ = 0U;
        validate_non_negative_index("l_reff", "N_GROUPS", N_GROUPS);
        context__.validate_dims("initialization", "l_reff", "double", context__.to_vec(N_GROUPS));
        // generate_declaration l_reff
        std::vector<double> l_reff(N_GROUPS,double(0));
        for (int i0__ = 0U; i0__ < N_GROUPS; ++i0__)
            l_reff[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < N_GROUPS; ++i0__)
            try {
            writer__.scalar_unconstrain(l_reff[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable l_reff: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ l;
        (void) l;  // dummy to suppress unused var warning
        if (jacobian__)
            l = in__.scalar_constrain(lp__);
        else
            l = in__.scalar_constrain();

        T__ b;
        (void) b;  // dummy to suppress unused var warning
        if (jacobian__)
            b = in__.scalar_constrain(lp__);
        else
            b = in__.scalar_constrain();

        T__ lsig_sq;
        (void) lsig_sq;  // dummy to suppress unused var warning
        if (jacobian__)
            lsig_sq = in__.scalar_lub_constrain(0,4,lp__);
        else
            lsig_sq = in__.scalar_lub_constrain(0,4);

        vector<T__> l_reff;
        size_t dim_l_reff_0__ = N_GROUPS;
        l_reff.reserve(dim_l_reff_0__);
        for (size_t k_0__ = 0; k_0__ < dim_l_reff_0__; ++k_0__) {
            if (jacobian__)
                l_reff.push_back(in__.scalar_constrain(lp__));
            else
                l_reff.push_back(in__.scalar_constrain());
        }


        // transformed parameters


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            lp_accum__.add(normal_log<propto__>(l, 0, 1));
            lp_accum__.add(normal_log<propto__>(b, 0, 10));
            lp_accum__.add(normal_log<propto__>(l_reff, 0, sqrt(lsig_sq)));
            lp_accum__.add(gamma_log<propto__>(lsig_sq, 1, 1));
            for (int i = 1; i <= N; ++i) {

                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),0))) {
                    lp_accum__.add(log_lgum_right_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),1))) {
                    lp_accum__.add(log_lgum_exact_lifetime(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),2))) {
                    lp_accum__.add(log_lgum_left_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),3))) {
                    lp_accum__.add(log_lgum_interval_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),get_base1(get_base1(t,i,"t",1),2,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("l");
        names__.push_back("b");
        names__.push_back("lsig_sq");
        names__.push_back("l_reff");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_GROUPS);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_loggumbel_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double l = in__.scalar_constrain();
        double b = in__.scalar_constrain();
        double lsig_sq = in__.scalar_lub_constrain(0,4);
        vector<double> l_reff;
        size_t dim_l_reff_0__ = N_GROUPS;
        for (size_t k_0__ = 0; k_0__ < dim_l_reff_0__; ++k_0__) {
            l_reff.push_back(in__.scalar_constrain());
        }
        vars__.push_back(l);
        vars__.push_back(b);
        vars__.push_back(lsig_sq);
        for (int k_0__ = 0; k_0__ < N_GROUPS; ++k_0__) {
            vars__.push_back(l_reff[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning



        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters

        if (!include_gqs__) return;
        // declare and define generated quantities
        validate_non_negative_index("log_lik", "N", N);
        vector_d log_lik(static_cast<Eigen::VectorXd::Index>(N));
        (void) log_lik;  // dummy to suppress unused var warning

        stan::math::initialize(log_lik, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(log_lik,DUMMY_VAR__);


        try {
            for (int i = 1; i <= N; ++i) {

                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),0))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_lgum_right_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),1))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_lgum_exact_lifetime(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),2))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_lgum_left_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),3))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_lgum_interval_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),get_base1(get_base1(t,i,"t",1),2,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_loggumbel";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "l";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lsig_sq";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_GROUPS; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "l_reff" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "l";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lsig_sq";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_GROUPS; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "l_reff" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}




// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_logistic_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_logistic");
    reader.add_event(89, 89, "end", "model_logistic");
    return reader;
}

template <typename T0__, typename T1__, typename T2__>
std::vector<std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type> >
vlogistic_surv(const std::vector<T0__>& t,
                   const std::vector<T1__>& mu,
                   const std::vector<T2__>& alpha,
                   const int& ROW,
                   const int& COL, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
            validate_non_negative_index("output", "ROW", ROW);
            validate_non_negative_index("output", "COL", COL);
            vector<vector<fun_scalar_t__> > output(ROW, (vector<fun_scalar_t__>(COL)));
            stan::math::initialize(output, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(output,DUMMY_VAR__);


            for (int j = 1; j <= ROW; ++j) {

                for (int i = 1; i <= COL; ++i) {

                    stan::math::assign(get_base1_lhs(get_base1_lhs(output,j,"output",1),i,"output",2), (1 / (1 + (exp(get_base1(mu,j,"mu",1)) * pow(get_base1(t,i,"t",1),exp(get_base1(alpha,j,"alpha",1)))))));
                }
            }
            return stan::math::promote_scalar<fun_return_scalar_t__>(output);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct vlogistic_surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        std::vector<std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type> >
    operator()(const std::vector<T0__>& t,
                   const std::vector<T1__>& mu,
                   const std::vector<T2__>& alpha,
                   const int& ROW,
                   const int& COL, std::ostream* pstream__) const {
        return vlogistic_surv(t, mu, alpha, ROW, COL, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
logistic_surv(const T0__& t,
                  const T1__& mu,
                  const T2__& alpha, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>((1 / (1 + (exp(mu) * pow(t,exp(alpha))))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct logistic_surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                  const T1__& mu,
                  const T2__& alpha, std::ostream* pstream__) const {
        return logistic_surv(t, mu, alpha, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
log_logistic_right_censor(const T0__& t,
                              const T1__& mu,
                              const T2__& alpha, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(log(logistic_surv(t,mu,alpha, pstream__)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_logistic_right_censor_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                              const T1__& mu,
                              const T2__& alpha, std::ostream* pstream__) const {
        return log_logistic_right_censor(t, mu, alpha, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
log_logistic_left_censor(const T0__& t,
                             const T1__& mu,
                             const T2__& alpha, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(log((1 - logistic_surv(t,mu,alpha, pstream__))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_logistic_left_censor_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                             const T1__& mu,
                             const T2__& alpha, std::ostream* pstream__) const {
        return log_logistic_left_censor(t, mu, alpha, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
log_logistic_interval_censor(const T0__& tl,
                                 const T1__& tr,
                                 const T2__& mu,
                                 const T3__& alpha, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(log((logistic_surv(tl,mu,alpha, pstream__) - logistic_surv(tr,mu,alpha, pstream__))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_logistic_interval_censor_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& tl,
                                 const T1__& tr,
                                 const T2__& mu,
                                 const T3__& alpha, std::ostream* pstream__) const {
        return log_logistic_interval_censor(tl, tr, mu, alpha, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
log_logistic_exact_lifetime(const T0__& t,
                                const T1__& mu,
                                const T2__& alpha, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(((log(exp((alpha + mu))) + ((exp(alpha) - 1) * log(t))) - (2 * log((1 + (exp(mu) * pow(t,exp(alpha))))))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_logistic_exact_lifetime_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                                const T1__& mu,
                                const T2__& alpha, std::ostream* pstream__) const {
        return log_logistic_exact_lifetime(t, mu, alpha, pstream__);
    }
};

class model_logistic : public prob_grad {
private:
    int N;
    int N_GROUPS;
    vector<vector<double> > t;
    vector<double> CENC;
    vector<int> ID;
public:
    model_logistic(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_logistic(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_logistic_namespace::model_logistic";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N_GROUPS", "int", context__.to_vec());
        N_GROUPS = int(0);
        vals_i__ = context__.vals_i("N_GROUPS");
        pos__ = 0;
        N_GROUPS = vals_i__[pos__++];
        validate_non_negative_index("t", "N", N);
        validate_non_negative_index("t", "2", 2);
        context__.validate_dims("data initialization", "t", "double", context__.to_vec(N,2));
        validate_non_negative_index("t", "N", N);
        validate_non_negative_index("t", "2", 2);
        t = std::vector<std::vector<double> >(N,std::vector<double>(2,double(0)));
        vals_r__ = context__.vals_r("t");
        pos__ = 0;
        size_t t_limit_1__ = 2;
        for (size_t i_1__ = 0; i_1__ < t_limit_1__; ++i_1__) {
            size_t t_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < t_limit_0__; ++i_0__) {
                t[i_0__][i_1__] = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("CENC", "N", N);
        context__.validate_dims("data initialization", "CENC", "double", context__.to_vec(N));
        validate_non_negative_index("CENC", "N", N);
        CENC = std::vector<double>(N,double(0));
        vals_r__ = context__.vals_r("CENC");
        pos__ = 0;
        size_t CENC_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < CENC_limit_0__; ++i_0__) {
            CENC[i_0__] = vals_r__[pos__++];
        }
        validate_non_negative_index("ID", "N", N);
        context__.validate_dims("data initialization", "ID", "int", context__.to_vec(N));
        validate_non_negative_index("ID", "N", N);
        ID = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("ID");
        pos__ = 0;
        size_t ID_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < ID_limit_0__; ++i_0__) {
            ID[i_0__] = vals_i__[pos__++];
        }

        // validate, data variables
        check_greater_or_equal(function__,"N",N,0);
        check_greater_or_equal(function__,"N_GROUPS",N_GROUPS,1);
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"ID[k0__]",ID[k0__],1);
        }
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        validate_non_negative_index("l_reff", "N_GROUPS", N_GROUPS);
        num_params_r__ += N_GROUPS;
    }

    ~model_logistic() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("l")))
            throw std::runtime_error("variable l missing");
        vals_r__ = context__.vals_r("l");
        pos__ = 0U;
        context__.validate_dims("initialization", "l", "double", context__.to_vec());
        // generate_declaration l
        double l(0);
        l = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(l);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable l: ") + e.what());
        }

        if (!(context__.contains_r("b")))
            throw std::runtime_error("variable b missing");
        vals_r__ = context__.vals_r("b");
        pos__ = 0U;
        context__.validate_dims("initialization", "b", "double", context__.to_vec());
        // generate_declaration b
        double b(0);
        b = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(b);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b: ") + e.what());
        }

        if (!(context__.contains_r("lsig_sq")))
            throw std::runtime_error("variable lsig_sq missing");
        vals_r__ = context__.vals_r("lsig_sq");
        pos__ = 0U;
        context__.validate_dims("initialization", "lsig_sq", "double", context__.to_vec());
        // generate_declaration lsig_sq
        double lsig_sq(0);
        lsig_sq = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0,4,lsig_sq);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable lsig_sq: ") + e.what());
        }

        if (!(context__.contains_r("l_reff")))
            throw std::runtime_error("variable l_reff missing");
        vals_r__ = context__.vals_r("l_reff");
        pos__ = 0U;
        validate_non_negative_index("l_reff", "N_GROUPS", N_GROUPS);
        context__.validate_dims("initialization", "l_reff", "double", context__.to_vec(N_GROUPS));
        // generate_declaration l_reff
        std::vector<double> l_reff(N_GROUPS,double(0));
        for (int i0__ = 0U; i0__ < N_GROUPS; ++i0__)
            l_reff[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < N_GROUPS; ++i0__)
            try {
            writer__.scalar_unconstrain(l_reff[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable l_reff: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ l;
        (void) l;  // dummy to suppress unused var warning
        if (jacobian__)
            l = in__.scalar_constrain(lp__);
        else
            l = in__.scalar_constrain();

        T__ b;
        (void) b;  // dummy to suppress unused var warning
        if (jacobian__)
            b = in__.scalar_constrain(lp__);
        else
            b = in__.scalar_constrain();

        T__ lsig_sq;
        (void) lsig_sq;  // dummy to suppress unused var warning
        if (jacobian__)
            lsig_sq = in__.scalar_lub_constrain(0,4,lp__);
        else
            lsig_sq = in__.scalar_lub_constrain(0,4);

        vector<T__> l_reff;
        size_t dim_l_reff_0__ = N_GROUPS;
        l_reff.reserve(dim_l_reff_0__);
        for (size_t k_0__ = 0; k_0__ < dim_l_reff_0__; ++k_0__) {
            if (jacobian__)
                l_reff.push_back(in__.scalar_constrain(lp__));
            else
                l_reff.push_back(in__.scalar_constrain());
        }


        // transformed parameters


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            lp_accum__.add(normal_log<propto__>(l, 0, 1));
            lp_accum__.add(normal_log<propto__>(b, 0, 1));
            lp_accum__.add(normal_log<propto__>(l_reff, 0, sqrt(lsig_sq)));
            lp_accum__.add(gamma_log<propto__>(lsig_sq, 1, 1));
            for (int i = 1; i <= N; ++i) {

                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),0))) {
                    lp_accum__.add(log_logistic_right_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),1))) {
                    lp_accum__.add(log_logistic_exact_lifetime(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),2))) {
                    lp_accum__.add(log_logistic_left_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),3))) {
                    lp_accum__.add(log_logistic_interval_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),get_base1(get_base1(t,i,"t",1),2,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("l");
        names__.push_back("b");
        names__.push_back("lsig_sq");
        names__.push_back("l_reff");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_GROUPS);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_logistic_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double l = in__.scalar_constrain();
        double b = in__.scalar_constrain();
        double lsig_sq = in__.scalar_lub_constrain(0,4);
        vector<double> l_reff;
        size_t dim_l_reff_0__ = N_GROUPS;
        for (size_t k_0__ = 0; k_0__ < dim_l_reff_0__; ++k_0__) {
            l_reff.push_back(in__.scalar_constrain());
        }
        vars__.push_back(l);
        vars__.push_back(b);
        vars__.push_back(lsig_sq);
        for (int k_0__ = 0; k_0__ < N_GROUPS; ++k_0__) {
            vars__.push_back(l_reff[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning



        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters

        if (!include_gqs__) return;
        // declare and define generated quantities
        validate_non_negative_index("log_lik", "N", N);
        vector_d log_lik(static_cast<Eigen::VectorXd::Index>(N));
        (void) log_lik;  // dummy to suppress unused var warning

        stan::math::initialize(log_lik, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(log_lik,DUMMY_VAR__);


        try {
            for (int i = 1; i <= N; ++i) {

                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),0))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_logistic_right_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),1))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_logistic_exact_lifetime(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),2))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_logistic_left_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),3))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_logistic_interval_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),get_base1(get_base1(t,i,"t",1),2,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_logistic";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "l";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lsig_sq";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_GROUPS; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "l_reff" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "l";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lsig_sq";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_GROUPS; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "l_reff" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}




// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_lognormal_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_lognormal");
    reader.add_event(92, 92, "end", "model_lognormal");
    return reader;
}

template <typename T0__, typename T1__, typename T2__>
std::vector<std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type> >
vlnorm_surv(const std::vector<T0__>& t,
                const std::vector<T1__>& mu,
                const std::vector<T2__>& sigma,
                const int& ROW,
                const int& COL, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
            validate_non_negative_index("output", "ROW", ROW);
            validate_non_negative_index("output", "COL", COL);
            vector<vector<fun_scalar_t__> > output(ROW, (vector<fun_scalar_t__>(COL)));
            stan::math::initialize(output, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(output,DUMMY_VAR__);


            for (int j = 1; j <= ROW; ++j) {

                for (int i = 1; i <= COL; ++i) {

                    stan::math::assign(get_base1_lhs(get_base1_lhs(output,j,"output",1),i,"output",2), exp(lognormal_ccdf_log(get_base1(t,i,"t",1),get_base1(mu,j,"mu",1),exp(get_base1(sigma,j,"sigma",1)))));
                }
            }
            return stan::math::promote_scalar<fun_return_scalar_t__>(output);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct vlnorm_surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        std::vector<std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type> >
    operator()(const std::vector<T0__>& t,
                const std::vector<T1__>& mu,
                const std::vector<T2__>& sigma,
                const int& ROW,
                const int& COL, std::ostream* pstream__) const {
        return vlnorm_surv(t, mu, sigma, ROW, COL, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
lnorm_surv(const T0__& t,
               const T1__& mu,
               const T2__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(exp(lognormal_ccdf_log(t,mu,exp(sigma))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct lnorm_surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
               const T1__& mu,
               const T2__& sigma, std::ostream* pstream__) const {
        return lnorm_surv(t, mu, sigma, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
log_lnorm_right_censor(const T0__& t,
                           const T1__& mu,
                           const T2__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(lognormal_ccdf_log(t,mu,exp(sigma)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_lnorm_right_censor_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                           const T1__& mu,
                           const T2__& sigma, std::ostream* pstream__) const {
        return log_lnorm_right_censor(t, mu, sigma, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
log_lnorm_left_censor(const T0__& t,
                          const T1__& mu,
                          const T2__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(lognormal_cdf_log(t,mu,exp(sigma)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_lnorm_left_censor_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                          const T1__& mu,
                          const T2__& sigma, std::ostream* pstream__) const {
        return log_lnorm_left_censor(t, mu, sigma, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
log_lnorm_interval_censor(const T0__& tl,
                              const T1__& tr,
                              const T2__& mu,
                              const T3__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(log((exp(lognormal_ccdf_log(tl,mu,exp(sigma))) - exp(lognormal_ccdf_log(tr,mu,exp(sigma))))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_lnorm_interval_censor_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& tl,
                              const T1__& tr,
                              const T2__& mu,
                              const T3__& sigma, std::ostream* pstream__) const {
        return log_lnorm_interval_censor(tl, tr, mu, sigma, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
log_lnorm_exact_lifetime(const T0__& t,
                             const T1__& mu,
                             const T2__& sigma, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(lognormal_log(t,mu,exp(sigma)));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_lnorm_exact_lifetime_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                             const T1__& mu,
                             const T2__& sigma, std::ostream* pstream__) const {
        return log_lnorm_exact_lifetime(t, mu, sigma, pstream__);
    }
};

class model_lognormal : public prob_grad {
private:
    int N;
    int N_GROUPS;
    vector<vector<double> > t;
    vector<double> CENC;
    vector<int> ID;
public:
    model_lognormal(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_lognormal(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_lognormal_namespace::model_lognormal";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N_GROUPS", "int", context__.to_vec());
        N_GROUPS = int(0);
        vals_i__ = context__.vals_i("N_GROUPS");
        pos__ = 0;
        N_GROUPS = vals_i__[pos__++];
        validate_non_negative_index("t", "N", N);
        validate_non_negative_index("t", "2", 2);
        context__.validate_dims("data initialization", "t", "double", context__.to_vec(N,2));
        validate_non_negative_index("t", "N", N);
        validate_non_negative_index("t", "2", 2);
        t = std::vector<std::vector<double> >(N,std::vector<double>(2,double(0)));
        vals_r__ = context__.vals_r("t");
        pos__ = 0;
        size_t t_limit_1__ = 2;
        for (size_t i_1__ = 0; i_1__ < t_limit_1__; ++i_1__) {
            size_t t_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < t_limit_0__; ++i_0__) {
                t[i_0__][i_1__] = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("CENC", "N", N);
        context__.validate_dims("data initialization", "CENC", "double", context__.to_vec(N));
        validate_non_negative_index("CENC", "N", N);
        CENC = std::vector<double>(N,double(0));
        vals_r__ = context__.vals_r("CENC");
        pos__ = 0;
        size_t CENC_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < CENC_limit_0__; ++i_0__) {
            CENC[i_0__] = vals_r__[pos__++];
        }
        validate_non_negative_index("ID", "N", N);
        context__.validate_dims("data initialization", "ID", "int", context__.to_vec(N));
        validate_non_negative_index("ID", "N", N);
        ID = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("ID");
        pos__ = 0;
        size_t ID_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < ID_limit_0__; ++i_0__) {
            ID[i_0__] = vals_i__[pos__++];
        }

        // validate, data variables
        check_greater_or_equal(function__,"N",N,0);
        check_greater_or_equal(function__,"N_GROUPS",N_GROUPS,1);
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"ID[k0__]",ID[k0__],1);
        }
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        validate_non_negative_index("l_reff", "N_GROUPS", N_GROUPS);
        num_params_r__ += N_GROUPS;
    }

    ~model_lognormal() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("l")))
            throw std::runtime_error("variable l missing");
        vals_r__ = context__.vals_r("l");
        pos__ = 0U;
        context__.validate_dims("initialization", "l", "double", context__.to_vec());
        // generate_declaration l
        double l(0);
        l = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(l);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable l: ") + e.what());
        }

        if (!(context__.contains_r("b")))
            throw std::runtime_error("variable b missing");
        vals_r__ = context__.vals_r("b");
        pos__ = 0U;
        context__.validate_dims("initialization", "b", "double", context__.to_vec());
        // generate_declaration b
        double b(0);
        b = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(b);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b: ") + e.what());
        }

        if (!(context__.contains_r("lsig_sq")))
            throw std::runtime_error("variable lsig_sq missing");
        vals_r__ = context__.vals_r("lsig_sq");
        pos__ = 0U;
        context__.validate_dims("initialization", "lsig_sq", "double", context__.to_vec());
        // generate_declaration lsig_sq
        double lsig_sq(0);
        lsig_sq = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0,4,lsig_sq);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable lsig_sq: ") + e.what());
        }

        if (!(context__.contains_r("l_reff")))
            throw std::runtime_error("variable l_reff missing");
        vals_r__ = context__.vals_r("l_reff");
        pos__ = 0U;
        validate_non_negative_index("l_reff", "N_GROUPS", N_GROUPS);
        context__.validate_dims("initialization", "l_reff", "double", context__.to_vec(N_GROUPS));
        // generate_declaration l_reff
        std::vector<double> l_reff(N_GROUPS,double(0));
        for (int i0__ = 0U; i0__ < N_GROUPS; ++i0__)
            l_reff[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < N_GROUPS; ++i0__)
            try {
            writer__.scalar_unconstrain(l_reff[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable l_reff: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ l;
        (void) l;  // dummy to suppress unused var warning
        if (jacobian__)
            l = in__.scalar_constrain(lp__);
        else
            l = in__.scalar_constrain();

        T__ b;
        (void) b;  // dummy to suppress unused var warning
        if (jacobian__)
            b = in__.scalar_constrain(lp__);
        else
            b = in__.scalar_constrain();

        T__ lsig_sq;
        (void) lsig_sq;  // dummy to suppress unused var warning
        if (jacobian__)
            lsig_sq = in__.scalar_lub_constrain(0,4,lp__);
        else
            lsig_sq = in__.scalar_lub_constrain(0,4);

        vector<T__> l_reff;
        size_t dim_l_reff_0__ = N_GROUPS;
        l_reff.reserve(dim_l_reff_0__);
        for (size_t k_0__ = 0; k_0__ < dim_l_reff_0__; ++k_0__) {
            if (jacobian__)
                l_reff.push_back(in__.scalar_constrain(lp__));
            else
                l_reff.push_back(in__.scalar_constrain());
        }


        // transformed parameters


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            lp_accum__.add(normal_log<propto__>(l, 0, 1));
            lp_accum__.add(uniform_log<propto__>(b, 0, 1));
            lp_accum__.add(normal_log<propto__>(l_reff, 0, sqrt(lsig_sq)));
            lp_accum__.add(gamma_log<propto__>(lsig_sq, 1, 1));
            for (int i = 1; i <= N; ++i) {

                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),0))) {
                    lp_accum__.add(log_lnorm_right_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),1))) {
                    lp_accum__.add(log_lnorm_exact_lifetime(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),2))) {
                    lp_accum__.add(log_lnorm_left_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),3))) {
                    lp_accum__.add(log_lnorm_interval_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),get_base1(get_base1(t,i,"t",1),2,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("l");
        names__.push_back("b");
        names__.push_back("lsig_sq");
        names__.push_back("l_reff");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_GROUPS);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_lognormal_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double l = in__.scalar_constrain();
        double b = in__.scalar_constrain();
        double lsig_sq = in__.scalar_lub_constrain(0,4);
        vector<double> l_reff;
        size_t dim_l_reff_0__ = N_GROUPS;
        for (size_t k_0__ = 0; k_0__ < dim_l_reff_0__; ++k_0__) {
            l_reff.push_back(in__.scalar_constrain());
        }
        vars__.push_back(l);
        vars__.push_back(b);
        vars__.push_back(lsig_sq);
        for (int k_0__ = 0; k_0__ < N_GROUPS; ++k_0__) {
            vars__.push_back(l_reff[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning



        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters

        if (!include_gqs__) return;
        // declare and define generated quantities
        validate_non_negative_index("log_lik", "N", N);
        vector_d log_lik(static_cast<Eigen::VectorXd::Index>(N));
        (void) log_lik;  // dummy to suppress unused var warning

        stan::math::initialize(log_lik, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(log_lik,DUMMY_VAR__);


        try {
            for (int i = 1; i <= N; ++i) {

                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),0))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_lnorm_right_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),1))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_lnorm_exact_lifetime(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),2))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_lnorm_left_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),3))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_lnorm_interval_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),get_base1(get_base1(t,i,"t",1),2,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_lognormal";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "l";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lsig_sq";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_GROUPS; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "l_reff" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "l";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lsig_sq";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_GROUPS; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "l_reff" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}




// Code generated by Stan version 2.16.0

#include <stan/model/model_header.hpp>

namespace model_weib_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_weib");
    reader.add_event(91, 91, "end", "model_weib");
    return reader;
}

template <typename T0__, typename T1__, typename T2__>
std::vector<std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type> >
vweib_surv(const std::vector<T0__>& t,
               const std::vector<T1__>& l,
               const std::vector<T2__>& b,
               const int& ROW,
               const int& COL, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
            validate_non_negative_index("output", "ROW", ROW);
            validate_non_negative_index("output", "COL", COL);
            vector<vector<fun_scalar_t__> > output(ROW, (vector<fun_scalar_t__>(COL)));
            stan::math::initialize(output, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(output,DUMMY_VAR__);


            for (int j = 1; j <= ROW; ++j) {

                for (int i = 1; i <= COL; ++i) {

                    stan::math::assign(get_base1_lhs(get_base1_lhs(output,j,"output",1),i,"output",2), exp((-(exp(-(get_base1(l,j,"l",1)))) * pow(get_base1(t,i,"t",1),exp(get_base1(b,j,"b",1))))));
                }
            }
            return stan::math::promote_scalar<fun_return_scalar_t__>(output);
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct vweib_surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        std::vector<std::vector<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type> >
    operator()(const std::vector<T0__>& t,
               const std::vector<T1__>& l,
               const std::vector<T2__>& b,
               const int& ROW,
               const int& COL, std::ostream* pstream__) const {
        return vweib_surv(t, l, b, ROW, COL, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
weib_surv(const T0__& t,
              const T1__& l,
              const T2__& b, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(exp((-(exp(-(l))) * pow(t,exp(b)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct weib_surv_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
              const T1__& l,
              const T2__& b, std::ostream* pstream__) const {
        return weib_surv(t, l, b, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
log_weib_right_censor(const T0__& t,
                          const T1__& l,
                          const T2__& b, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>((-(exp(-(l))) * pow(t,exp(b))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_weib_right_censor_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                          const T1__& l,
                          const T2__& b, std::ostream* pstream__) const {
        return log_weib_right_censor(t, l, b, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
log_weib_left_censor(const T0__& t,
                         const T1__& l,
                         const T2__& b, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(log((1 - exp((-(exp(-(l))) * pow(t,exp(b)))))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_weib_left_censor_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                         const T1__& l,
                         const T2__& b, std::ostream* pstream__) const {
        return log_weib_left_censor(t, l, b, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__, typename T3__>
typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
log_weib_interval_censor(const T0__& tl,
                             const T1__& tr,
                             const T2__& l,
                             const T3__& b, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(log((exp((-(exp(-(l))) * pow(tl,exp(b)))) - exp((-(exp(-(l))) * pow(tr,exp(b)))))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_weib_interval_censor_functor__ {
    template <typename T0__, typename T1__, typename T2__, typename T3__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__, T3__>::type
    operator()(const T0__& tl,
                             const T1__& tr,
                             const T2__& l,
                             const T3__& b, std::ostream* pstream__) const {
        return log_weib_interval_censor(tl, tr, l, b, pstream__);
    }
};

template <typename T0__, typename T1__, typename T2__>
typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
log_weib_exact_lifetime(const T0__& t,
                            const T1__& l,
                            const T2__& b, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type fun_scalar_t__;
    typedef fun_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        fun_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {

        return stan::math::promote_scalar<fun_return_scalar_t__>(((log((exp(b) * exp(-(l)))) + ((exp(b) - 1) * log(t))) - (exp(-(l)) * pow(t,exp(b)))));
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct log_weib_exact_lifetime_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        typename boost::math::tools::promote_args<T0__, T1__, T2__>::type
    operator()(const T0__& t,
                            const T1__& l,
                            const T2__& b, std::ostream* pstream__) const {
        return log_weib_exact_lifetime(t, l, b, pstream__);
    }
};

class model_weib : public prob_grad {
private:
    int N;
    int N_GROUPS;
    vector<vector<double> > t;
    vector<double> CENC;
    vector<int> ID;
public:
    model_weib(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_weib(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_weib_namespace::model_weib";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "N_GROUPS", "int", context__.to_vec());
        N_GROUPS = int(0);
        vals_i__ = context__.vals_i("N_GROUPS");
        pos__ = 0;
        N_GROUPS = vals_i__[pos__++];
        validate_non_negative_index("t", "N", N);
        validate_non_negative_index("t", "2", 2);
        context__.validate_dims("data initialization", "t", "double", context__.to_vec(N,2));
        validate_non_negative_index("t", "N", N);
        validate_non_negative_index("t", "2", 2);
        t = std::vector<std::vector<double> >(N,std::vector<double>(2,double(0)));
        vals_r__ = context__.vals_r("t");
        pos__ = 0;
        size_t t_limit_1__ = 2;
        for (size_t i_1__ = 0; i_1__ < t_limit_1__; ++i_1__) {
            size_t t_limit_0__ = N;
            for (size_t i_0__ = 0; i_0__ < t_limit_0__; ++i_0__) {
                t[i_0__][i_1__] = vals_r__[pos__++];
            }
        }
        validate_non_negative_index("CENC", "N", N);
        context__.validate_dims("data initialization", "CENC", "double", context__.to_vec(N));
        validate_non_negative_index("CENC", "N", N);
        CENC = std::vector<double>(N,double(0));
        vals_r__ = context__.vals_r("CENC");
        pos__ = 0;
        size_t CENC_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < CENC_limit_0__; ++i_0__) {
            CENC[i_0__] = vals_r__[pos__++];
        }
        validate_non_negative_index("ID", "N", N);
        context__.validate_dims("data initialization", "ID", "int", context__.to_vec(N));
        validate_non_negative_index("ID", "N", N);
        ID = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("ID");
        pos__ = 0;
        size_t ID_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < ID_limit_0__; ++i_0__) {
            ID[i_0__] = vals_i__[pos__++];
        }

        // validate, data variables
        check_greater_or_equal(function__,"N",N,0);
        check_greater_or_equal(function__,"N_GROUPS",N_GROUPS,1);
        for (int k0__ = 0; k0__ < N; ++k0__) {
            check_greater_or_equal(function__,"ID[k0__]",ID[k0__],1);
        }
        // initialize data variables

        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed data

        // validate, set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        ++num_params_r__;
        validate_non_negative_index("l_reff", "N_GROUPS", N_GROUPS);
        num_params_r__ += N_GROUPS;
    }

    ~model_weib() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("l")))
            throw std::runtime_error("variable l missing");
        vals_r__ = context__.vals_r("l");
        pos__ = 0U;
        context__.validate_dims("initialization", "l", "double", context__.to_vec());
        // generate_declaration l
        double l(0);
        l = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(l);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable l: ") + e.what());
        }

        if (!(context__.contains_r("b")))
            throw std::runtime_error("variable b missing");
        vals_r__ = context__.vals_r("b");
        pos__ = 0U;
        context__.validate_dims("initialization", "b", "double", context__.to_vec());
        // generate_declaration b
        double b(0);
        b = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(b);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable b: ") + e.what());
        }

        if (!(context__.contains_r("lsig_sq")))
            throw std::runtime_error("variable lsig_sq missing");
        vals_r__ = context__.vals_r("lsig_sq");
        pos__ = 0U;
        context__.validate_dims("initialization", "lsig_sq", "double", context__.to_vec());
        // generate_declaration lsig_sq
        double lsig_sq(0);
        lsig_sq = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0,2,lsig_sq);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable lsig_sq: ") + e.what());
        }

        if (!(context__.contains_r("l_reff")))
            throw std::runtime_error("variable l_reff missing");
        vals_r__ = context__.vals_r("l_reff");
        pos__ = 0U;
        validate_non_negative_index("l_reff", "N_GROUPS", N_GROUPS);
        context__.validate_dims("initialization", "l_reff", "double", context__.to_vec(N_GROUPS));
        // generate_declaration l_reff
        std::vector<double> l_reff(N_GROUPS,double(0));
        for (int i0__ = 0U; i0__ < N_GROUPS; ++i0__)
            l_reff[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < N_GROUPS; ++i0__)
            try {
            writer__.scalar_unconstrain(l_reff[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable l_reff: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ l;
        (void) l;  // dummy to suppress unused var warning
        if (jacobian__)
            l = in__.scalar_constrain(lp__);
        else
            l = in__.scalar_constrain();

        T__ b;
        (void) b;  // dummy to suppress unused var warning
        if (jacobian__)
            b = in__.scalar_constrain(lp__);
        else
            b = in__.scalar_constrain();

        T__ lsig_sq;
        (void) lsig_sq;  // dummy to suppress unused var warning
        if (jacobian__)
            lsig_sq = in__.scalar_lub_constrain(0,2,lp__);
        else
            lsig_sq = in__.scalar_lub_constrain(0,2);

        vector<T__> l_reff;
        size_t dim_l_reff_0__ = N_GROUPS;
        l_reff.reserve(dim_l_reff_0__);
        for (size_t k_0__ = 0; k_0__ < dim_l_reff_0__; ++k_0__) {
            if (jacobian__)
                l_reff.push_back(in__.scalar_constrain(lp__));
            else
                l_reff.push_back(in__.scalar_constrain());
        }


        // transformed parameters


        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        const char* function__ = "validate transformed params";
        (void) function__;  // dummy to suppress unused var warning

        // model body
        try {

            lp_accum__.add(normal_log<propto__>(l, 0, 1));
            lp_accum__.add(normal_log<propto__>(b, 0, 0.5));
            lp_accum__.add(normal_log<propto__>(l_reff, 0, sqrt(lsig_sq)));
            lp_accum__.add(gamma_log<propto__>(lsig_sq, 1, 1));
            for (int i = 1; i <= N; ++i) {

                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),0))) {
                    lp_accum__.add(log_weib_right_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),1))) {
                    lp_accum__.add(log_weib_exact_lifetime(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),2))) {
                    lp_accum__.add(log_weib_left_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),3))) {
                    lp_accum__.add(log_weib_interval_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),get_base1(get_base1(t,i,"t",1),2,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("l");
        names__.push_back("b");
        names__.push_back("lsig_sq");
        names__.push_back("l_reff");
        names__.push_back("log_lik");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_GROUPS);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_weib_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double l = in__.scalar_constrain();
        double b = in__.scalar_constrain();
        double lsig_sq = in__.scalar_lub_constrain(0,2);
        vector<double> l_reff;
        size_t dim_l_reff_0__ = N_GROUPS;
        for (size_t k_0__ = 0; k_0__ < dim_l_reff_0__; ++k_0__) {
            l_reff.push_back(in__.scalar_constrain());
        }
        vars__.push_back(l);
        vars__.push_back(b);
        vars__.push_back(lsig_sq);
        for (int k_0__ = 0; k_0__ < N_GROUPS; ++k_0__) {
            vars__.push_back(l_reff[k_0__]);
        }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning



        try {
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate transformed parameters

        // write transformed parameters

        if (!include_gqs__) return;
        // declare and define generated quantities
        validate_non_negative_index("log_lik", "N", N);
        vector_d log_lik(static_cast<Eigen::VectorXd::Index>(N));
        (void) log_lik;  // dummy to suppress unused var warning

        stan::math::initialize(log_lik, std::numeric_limits<double>::quiet_NaN());
        stan::math::fill(log_lik,DUMMY_VAR__);


        try {
            for (int i = 1; i <= N; ++i) {

                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),0))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_weib_right_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),1))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_weib_exact_lifetime(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),2))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_weib_left_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
                if (as_bool(logical_eq(get_base1(CENC,i,"CENC",1),3))) {
                    stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), log_weib_interval_censor(get_base1(get_base1(t,i,"t",1),1,"t",2),get_base1(get_base1(t,i,"t",1),2,"t",2),(l + get_base1(l_reff,get_base1(ID,i,"ID",1),"l_reff",1)),b, pstream__));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_weib";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "l";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lsig_sq";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_GROUPS; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "l_reff" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "l";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "b";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "lsig_sq";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N_GROUPS; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "l_reff" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}




#endif
